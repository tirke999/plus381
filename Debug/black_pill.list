
black_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007778  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007970  08007970  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08007978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001538  20000190  08007b08  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016c8  08007b08  000216c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001841a  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370e  00000000  00000000  000385da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0003bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  0003cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b9b  00000000  00000000  0003d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ec6  00000000  00000000  0005636b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088efd  00000000  00000000  00069231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f212e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  000f2184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000190 	.word	0x20000190
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080078f4 	.word	0x080078f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000194 	.word	0x20000194
 80001d0:	080078f4 	.word	0x080078f4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb36 	bl	8000b40 <HAL_Init>

  /* USER CODE BEGIN Init */
  timer_init();
 80004d4:	f000 f9d9 	bl	800088a <timer_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f812 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f87a 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 fa7a 	bl	80009d8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f006 fcf0 	bl	8006ec8 <MX_USB_DEVICE_Init>
	  //HAL_Delay(1000);

	  //HAL_UART_TxCpltCallback(&huart1);
	  //HAL_UART_RxCpltCallback(&huart1);

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004e8:	2120      	movs	r1, #32
 80004ea:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x30>)
 80004ec:	f000 feff 	bl	80012ee <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f4:	f000 fb96 	bl	8000c24 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004f8:	e7f6      	b.n	80004e8 <main+0x1c>
 80004fa:	bf00      	nop
 80004fc:	40020000 	.word	0x40020000

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 f9e8 	bl	80078e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800054c:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <SystemClock_Config+0xd0>)
 800054e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000578:	23a8      	movs	r3, #168	; 0xa8
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800057c:	2304      	movs	r3, #4
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000580:	2307      	movs	r3, #7
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f002 f84d 	bl	8002628 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000594:	f000 f886 	bl	80006a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2102      	movs	r1, #2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 faaf 	bl	8002b18 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 f870 	bl	80006a4 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_GPIO_Init+0xc4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a29      	ldr	r2, [pc, #164]	; (8000698 <MX_GPIO_Init+0xc4>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_GPIO_Init+0xc4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_GPIO_Init+0xc4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a22      	ldr	r2, [pc, #136]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_GPIO_Init+0xc4>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	4815      	ldr	r0, [pc, #84]	; (800069c <MX_GPIO_Init+0xc8>)
 8000646:	f000 fe39 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000650:	f000 fe34 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xc8>)
 800066e:	f000 fca1 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000672:	2320      	movs	r3, #32
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_GPIO_Init+0xcc>)
 800068a:	f000 fc93 	bl	8000fb4 <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020000 	.word	0x40020000

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x8>
	...

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <HAL_MspInit+0x4c>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_MspInit+0x4c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <HAL_UART_MspInit+0x94>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d134      	bne.n	800078c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <HAL_UART_MspInit+0x98>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <HAL_UART_MspInit+0x98>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_UART_MspInit+0x98>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_UART_MspInit+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_UART_MspInit+0x98>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_UART_MspInit+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800075a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800076c:	2307      	movs	r3, #7
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <HAL_UART_MspInit+0x9c>)
 8000778:	f000 fc1c 	bl	8000fb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	2025      	movs	r0, #37	; 0x25
 8000782:	f000 fb4e 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000786:	2025      	movs	r0, #37	; 0x25
 8000788:	f000 fb67 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40011000 	.word	0x40011000
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f9fa 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <USART1_IRQHandler+0x10>)
 80007fa:	f002 fcdd 	bl	80031b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200003dc 	.word	0x200003dc

08000808 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <OTG_FS_IRQHandler+0x10>)
 800080e:	f000 fed8 	bl	80015c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200012c0 	.word	0x200012c0

0800081c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <SystemInit+0x20>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <SystemInit+0x20>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  
//  ldr   sp, =_estack      /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000866:	f7ff ffd9 	bl	800081c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f007 f817 	bl	800789c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff fe2d 	bl	80004cc <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800087c:	08007978 	.word	0x08007978
  ldr r2, =_sbss
 8000880:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000884:	200016c8 	.word	0x200016c8

08000888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC_IRQHandler>

0800088a <timer_init>:



void
timer_init (void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  tim2_init ();
 800088e:	f000 f803 	bl	8000898 <tim2_init>

  //tim4_init ();
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <tim2_init>:

static void
tim2_init (void) //Inicijalizacija timera 2 i podesavanje registara
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= (0b1 << 0);
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <tim2_init+0x88>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <tim2_init+0x88>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40

  TIM2->CR1 &= ~(0xffff);
 80008a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b2:	0c1b      	lsrs	r3, r3, #16
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
  TIM2->CR1 |= (0b1 << 2) | (0b1 << 7);
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80008c6:	6013      	str	r3, [r2, #0]

  TIM2->DIER |= (0b1 << 0); //dozvola TIM2 da generise prekid (na overflow)
 80008c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	60d3      	str	r3, [r2, #12]
  // trenutno: 84MHz - 1MHz - 1kHz
  // zeljeno: 1kHz - 1ms

  //PSC je delitelj frekvencije
  //ARR je maksimalna vrednost do koje mozemo da brojimo
  TIM2->PSC = (84 - 1);  //Dobija se 1 MHz-->>Preskaler (1M = 1000k)
 80008d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008dc:	2253      	movs	r2, #83	; 0x53
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = (1000 - 1); //Auto Reload Registar (max vrednost brojanja)
 80008e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM2->EGR |= (0b1 << 0);
 80008ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6153      	str	r3, [r2, #20]

  TIM2->CR1 |= (0b1 << 0);
 80008fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]

  NVIC->ISER[0] |= (0b1 << 28); //ISER je vektor od 8 registara, svaki po 32 bit-a
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <tim2_init+0x8c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <tim2_init+0x8c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6013      	str	r3, [r2, #0]
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40023800 	.word	0x40023800
 8000924:	e000e100 	.word	0xe000e100

08000928 <is_time_passed>:



bool //funkcija koja se koristi za racunanje koliko je vremena proslo
is_time_passed (uint32_t ms)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  static uint32_t start_time;
  bool res = false;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]

  if (flag_timer == false)
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <is_time_passed+0x50>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <is_time_passed+0x28>
    {
      start_time = sys_time;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <is_time_passed+0x54>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <is_time_passed+0x58>)
 8000948:	6013      	str	r3, [r2, #0]
      flag_timer = true;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <is_time_passed+0x50>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
    }

  if (ms <= (sys_time - start_time))
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <is_time_passed+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <is_time_passed+0x58>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	d804      	bhi.n	800096a <is_time_passed+0x42>
    {
      res = true;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
      flag_timer = false;
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <is_time_passed+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
    }

  return res;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	200001b0 	.word	0x200001b0
 800097c:	200001ac 	.word	0x200001ac
 8000980:	200001b4 	.word	0x200001b4

08000984 <TIM2_IRQHandler>:



void
TIM2_IRQHandler (void) //Merenje proteklog vremena u ms
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  if (TIM2->SR & (0b1 << 0))     //Provera da li je TIM2 u statu registru dobio jedinicu, odnosno izbrojao do kraja vec jednom
 8000988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d017      	beq.n	80009c6 <TIM2_IRQHandler+0x42>
    {
      TIM2->SR &= ~(0b1 << 0);  //resetovanje brojaca da broji ispocetka
 8000996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a0:	f023 0301 	bic.w	r3, r3, #1
 80009a4:	6113      	str	r3, [r2, #16]

      // Telo funkcije
      sys_time++;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <TIM2_IRQHandler+0x4c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <TIM2_IRQHandler+0x4c>)
 80009ae:	6013      	str	r3, [r2, #0]
      //sens_robot();

      //Regulacija brzine
      //regulacija_brzine();

      if((sys_time % 10) == 0){
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <TIM2_IRQHandler+0x4c>)
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <TIM2_IRQHandler+0x50>)
 80009b6:	fba3 2301 	umull	r2, r3, r3, r1
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	1aca      	subs	r2, r1, r3
	  //Regulacija pozicije
      }
    }
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	200001ac 	.word	0x200001ac
 80009d4:	cccccccd 	.word	0xcccccccd

080009d8 <MX_USART1_UART_Init>:

uint8_t tx_buff[] = {0,1,2,3,4,5,6,7};


void MX_USART1_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_USART1_UART_Init+0x64>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0e:	480a      	ldr	r0, [pc, #40]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 8000a10:	f002 fa7e 	bl	8002f10 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART1_UART_Init+0x46>
  	{
  		Error_Handler();
 8000a1a:	f7ff fe43 	bl	80006a4 <Error_Handler>
  	}
  HAL_UART_Receive_IT(&huart1, rxCharacter, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <MX_USART1_UART_Init+0x68>)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 8000a24:	f002 fb98 	bl	8003158 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, tx_buff, 8);
 8000a28:	2208      	movs	r2, #8
 8000a2a:	4906      	ldr	r1, [pc, #24]	; (8000a44 <MX_USART1_UART_Init+0x6c>)
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <MX_USART1_UART_Init+0x60>)
 8000a2e:	f002 fb4e 	bl	80030ce <HAL_UART_Transmit_IT>


}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200003dc 	.word	0x200003dc
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	20000004 	.word	0x20000004
 8000a44:	2000000c 	.word	0x2000000c

08000a48 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

		if (is_time_passed(1000))
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f7ff ff68 	bl	8000928 <is_time_passed>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d01c      	beq.n	8000a98 <HAL_UART_RxCpltCallback+0x50>
		{

		for (int i = 0; i<6; i++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e00a      	b.n	8000a7a <HAL_UART_RxCpltCallback+0x32>
		{
		Uart_Ring_Buf_Push(&uartRxRingBuf, rxCharacter[i]); // store received character into ring buffer
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_UART_RxCpltCallback+0x58>)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <HAL_UART_RxCpltCallback+0x5c>)
 8000a70:	f000 f81c 	bl	8000aac <Uart_Ring_Buf_Push>
		for (int i = 0; i<6; i++)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	ddf1      	ble.n	8000a64 <HAL_UART_RxCpltCallback+0x1c>
		}
		HAL_UART_Receive_IT(&huart1, rxCharacter, 6); 		// start uart rx interrupt again
 8000a80:	2206      	movs	r2, #6
 8000a82:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <HAL_UART_RxCpltCallback+0x58>)
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <HAL_UART_RxCpltCallback+0x60>)
 8000a86:	f002 fb67 	bl	8003158 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart1, rxCharacter, 6, HAL_MAX_DELAY);
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a8e:	2206      	movs	r2, #6
 8000a90:	4903      	ldr	r1, [pc, #12]	; (8000aa0 <HAL_UART_RxCpltCallback+0x58>)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_UART_RxCpltCallback+0x60>)
 8000a94:	f002 fa89 	bl	8002faa <HAL_UART_Transmit>

		}

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	20000420 	.word	0x20000420
 8000aa8:	200003dc 	.word	0x200003dc

08000aac <Uart_Ring_Buf_Push>:

void Uart_Ring_Buf_Push(UartRxRingBuff_t *rb, uint8_t data) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
	if (rb->length >= 500) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	; 0x1f8
 8000abe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ac2:	d21e      	bcs.n	8000b02 <Uart_Ring_Buf_Push+0x56>
		return;
	}

	rb->data[rb->head++] = data;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	; 0x1f4
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	b291      	uxth	r1, r2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	f8a2 11f4 	strh.w	r1, [r2, #500]	; 0x1f4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	78fa      	ldrb	r2, [r7, #3]
 8000ada:	545a      	strb	r2, [r3, r1]
	rb->length++;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	; 0x1f8
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8

	if (rb->head == 500) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	; 0x1f4
 8000af2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000af6:	d105      	bne.n	8000b04 <Uart_Ring_Buf_Push+0x58>
		rb->head = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
 8000b00:	e000      	b.n	8000b04 <Uart_Ring_Buf_Push+0x58>
		return;
 8000b02:	bf00      	nop
	}
}
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	if (is_time_passed(1000))
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f7ff ff04 	bl	8000928 <is_time_passed>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d004      	beq.n	8000b30 <HAL_UART_TxCpltCallback+0x20>
	{
	HAL_UART_Transmit_IT(&huart1, tx_buff, 8);
 8000b26:	2208      	movs	r2, #8
 8000b28:	4903      	ldr	r1, [pc, #12]	; (8000b38 <HAL_UART_TxCpltCallback+0x28>)
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <HAL_UART_TxCpltCallback+0x2c>)
 8000b2c:	f002 facf 	bl	80030ce <HAL_UART_Transmit_IT>
	}

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	200003dc 	.word	0x200003dc

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_Init+0x40>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_Init+0x40>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x40>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f94f 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff fd9c 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f967 	bl	8000e76 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 f92f 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000018 	.word	0x20000018
 8000be0:	20000014 	.word	0x20000014

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000018 	.word	0x20000018
 8000c08:	2000061c 	.word	0x2000061c

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000061c 	.word	0x2000061c

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000018 	.word	0x20000018

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff3e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff31 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff feb6 	bl	8000c0c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d008      	beq.n	8000ec0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e052      	b.n	8000f66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0216 	bic.w	r2, r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ede:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <HAL_DMA_Abort+0x62>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0208 	bic.w	r2, r2, #8
 8000efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f10:	e013      	b.n	8000f3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f12:	f7ff fe7b 	bl	8000c0c <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d90c      	bls.n	8000f3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e015      	b.n	8000f66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e4      	bne.n	8000f12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4c:	223f      	movs	r2, #63	; 0x3f
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d004      	beq.n	8000f8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e00c      	b.n	8000fa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2205      	movs	r2, #5
 8000f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e159      	b.n	8001284 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8148 	bne.w	800127e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a2 	beq.w	800127e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b57      	ldr	r3, [pc, #348]	; (800129c <HAL_GPIO_Init+0x2e8>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a56      	ldr	r2, [pc, #344]	; (800129c <HAL_GPIO_Init+0x2e8>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b54      	ldr	r3, [pc, #336]	; (800129c <HAL_GPIO_Init+0x2e8>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_GPIO_Init+0x2f0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x202>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_GPIO_Init+0x2f4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x1fe>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a47      	ldr	r2, [pc, #284]	; (80012ac <HAL_GPIO_Init+0x2f8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x1fa>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a46      	ldr	r2, [pc, #280]	; (80012b0 <HAL_GPIO_Init+0x2fc>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x1f6>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a45      	ldr	r2, [pc, #276]	; (80012b4 <HAL_GPIO_Init+0x300>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x1f2>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x204>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x2ec>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_GPIO_Init+0x304>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fa:	4a2f      	ldr	r2, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x304>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001224:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_GPIO_Init+0x304>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124e:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_GPIO_Init+0x304>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f aea2 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	041a      	lsls	r2, r3, #16
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43d9      	mvns	r1, r3
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	400b      	ands	r3, r1
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001324:	b08f      	sub	sp, #60	; 0x3c
 8001326:	af0a      	add	r7, sp, #40	; 0x28
 8001328:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e10f      	b.n	8001554 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d106      	bne.n	8001354 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f005 ff9a 	bl	8007288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2203      	movs	r2, #3
 8001358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fee3 	bl	800413e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	687e      	ldr	r6, [r7, #4]
 8001380:	466d      	mov	r5, sp
 8001382:	f106 0410 	add.w	r4, r6, #16
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001392:	e885 0003 	stmia.w	r5, {r0, r1}
 8001396:	1d33      	adds	r3, r6, #4
 8001398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	f002 fdba 	bl	8003f14 <USB_CoreInit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0d0      	b.n	8001554 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fed1 	bl	8004160 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e04a      	b.n	800145a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	333d      	adds	r3, #61	; 0x3d
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	333c      	adds	r3, #60	; 0x3c
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	b298      	uxth	r0, r3
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3342      	adds	r3, #66	; 0x42
 8001400:	4602      	mov	r2, r0
 8001402:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	333f      	adds	r3, #63	; 0x3f
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3344      	adds	r3, #68	; 0x44
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3348      	adds	r3, #72	; 0x48
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3350      	adds	r3, #80	; 0x50
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	3301      	adds	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3af      	bcc.n	80013c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e044      	b.n	80014f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	3301      	adds	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3b5      	bcc.n	800146a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	687e      	ldr	r6, [r7, #4]
 8001506:	466d      	mov	r5, sp
 8001508:	f106 0410 	add.w	r4, r6, #16
 800150c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001518:	e885 0003 	stmia.w	r5, {r0, r1}
 800151c:	1d33      	adds	r3, r6, #4
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f002 fe69 	bl	80041f8 <USB_DevInit>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e00d      	b.n	8001554 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f003 fee5 	bl	800531c <USB_DevDisconnect>

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800155c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_PCD_Start+0x1c>
 8001574:	2302      	movs	r3, #2
 8001576:	e020      	b.n	80015ba <HAL_PCD_Start+0x5e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	2b01      	cmp	r3, #1
 8001586:	d109      	bne.n	800159c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800158c:	2b01      	cmp	r3, #1
 800158e:	d005      	beq.n	800159c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001594:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fdbb 	bl	800411c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fe95 	bl	80052da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015c2:	b590      	push	{r4, r7, lr}
 80015c4:	b08d      	sub	sp, #52	; 0x34
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 ff53 	bl	8005484 <USB_GetMode>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 839d 	bne.w	8001d20 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 feb7 	bl	800535e <USB_ReadInterrupts>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8393 	beq.w	8001d1e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 feae 	bl	800535e <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b02      	cmp	r3, #2
 800160a:	d107      	bne.n	800161c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f002 0202 	and.w	r2, r2, #2
 800161a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fe9c 	bl	800535e <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b10      	cmp	r3, #16
 800162e:	d161      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0210 	bic.w	r2, r2, #16
 800163e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 020f 	and.w	r2, r3, #15
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	0c5b      	lsrs	r3, r3, #17
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	2b02      	cmp	r3, #2
 800166a:	d124      	bne.n	80016b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d035      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	6a38      	ldr	r0, [r7, #32]
 800168c:	f003 fcd3 	bl	8005036 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169c:	441a      	add	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ae:	441a      	add	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	619a      	str	r2, [r3, #24]
 80016b4:	e016      	b.n	80016e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	0c5b      	lsrs	r3, r3, #17
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d110      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016c8:	2208      	movs	r2, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	6a38      	ldr	r0, [r7, #32]
 80016ce:	f003 fcb2 	bl	8005036 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016de:	441a      	add	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0210 	orr.w	r2, r2, #16
 80016f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fe30 	bl	800535e <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001704:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001708:	d16e      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fe36 	bl	8005384 <USB_ReadDevAllOutEpInterrupt>
 8001718:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800171a:	e062      	b.n	80017e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d057      	beq.n	80017d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f003 fe5b 	bl	80053ec <USB_ReadDevOutEPInterrupt>
 8001736:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00c      	beq.n	800175c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174e:	461a      	mov	r2, r3
 8001750:	2301      	movs	r3, #1
 8001752:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fdb0 	bl	80022bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00c      	beq.n	8001780 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001772:	461a      	mov	r2, r3
 8001774:	2308      	movs	r3, #8
 8001776:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 feaa 	bl	80024d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001796:	461a      	mov	r2, r3
 8001798:	2310      	movs	r3, #16
 800179a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b2:	461a      	mov	r2, r3
 80017b4:	2320      	movs	r3, #32
 80017b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ce:	461a      	mov	r2, r3
 80017d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d199      	bne.n	800171c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fdb6 	bl	800535e <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017fc:	f040 80c0 	bne.w	8001980 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fdd7 	bl	80053b8 <USB_ReadDevAllInEpInterrupt>
 800180a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001810:	e0b2      	b.n	8001978 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a7 	beq.w	800196c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f003 fdfd 	bl	8005428 <USB_ReadDevInEPInterrupt>
 800182e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d057      	beq.n	80018ea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	2201      	movs	r2, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	69f9      	ldr	r1, [r7, #28]
 8001856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800185a:	4013      	ands	r3, r2
 800185c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800186a:	461a      	mov	r2, r3
 800186c:	2301      	movs	r3, #1
 800186e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d132      	bne.n	80018de <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3348      	adds	r3, #72	; 0x48
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4403      	add	r3, r0
 8001898:	3344      	adds	r3, #68	; 0x44
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4419      	add	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4403      	add	r3, r0
 80018ac:	3348      	adds	r3, #72	; 0x48
 80018ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d113      	bne.n	80018de <HAL_PCD_IRQHandler+0x31c>
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3350      	adds	r3, #80	; 0x50
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d108      	bne.n	80018de <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018d6:	461a      	mov	r2, r3
 80018d8:	2101      	movs	r1, #1
 80018da:	f003 fe05 	bl	80054e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f005 fd50 	bl	800738a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001900:	461a      	mov	r2, r3
 8001902:	2308      	movs	r3, #8
 8001904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191c:	461a      	mov	r2, r3
 800191e:	2310      	movs	r3, #16
 8001920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001938:	461a      	mov	r2, r3
 800193a:	2340      	movs	r3, #64	; 0x40
 800193c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001954:	461a      	mov	r2, r3
 8001956:	2302      	movs	r3, #2
 8001958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fc1b 	bl	80021a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	3301      	adds	r3, #1
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197a:	2b00      	cmp	r3, #0
 800197c:	f47f af49 	bne.w	8001812 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fcea 	bl	800535e <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001994:	d122      	bne.n	80019dc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019bc:	2100      	movs	r1, #0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fe26 	bl	8002610 <HAL_PCDEx_LPM_Callback>
 80019c4:	e002      	b.n	80019cc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f005 fd4c 	bl	8007464 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fcbc 	bl	800535e <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019f0:	d112      	bne.n	8001a18 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f005 fd08 	bl	8007418 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a16:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fc9e 	bl	800535e <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2c:	f040 80c7 	bne.w	8001bbe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2110      	movs	r1, #16
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fd38 	bl	80044c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a54:	e056      	b.n	8001b04 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a62:	461a      	mov	r2, r3
 8001a64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	015a      	lsls	r2, r3, #5
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7a:	0151      	lsls	r1, r2, #5
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	440a      	add	r2, r1
 8001a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a88:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9a:	0151      	lsls	r1, r2, #5
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	440a      	add	r2, r1
 8001aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001aa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001aa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001abc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ace:	0151      	lsls	r1, r2, #5
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	440a      	add	r2, r1
 8001ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001adc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aee:	0151      	lsls	r1, r2, #5
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	440a      	add	r2, r1
 8001af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001afc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	3301      	adds	r3, #1
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3a3      	bcc.n	8001a56 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3a:	f043 030b 	orr.w	r3, r3, #11
 8001b3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b50:	f043 030b 	orr.w	r3, r3, #11
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	e015      	b.n	8001b84 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b6a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7e:	f043 030b 	orr.w	r3, r3, #11
 8001b82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f003 fc9d 	bl	80054e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fbcb 	bl	800535e <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd2:	d124      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fc61 	bl	80054a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fcc9 	bl	800457a <USB_GetDevSpeed>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	f001 f958 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	4620      	mov	r0, r4
 8001c04:	f002 f9e8 	bl	8003fd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f005 fbe6 	bl	80073da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fb9b 	bl	800535e <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d10a      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f005 fbc3 	bl	80073be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f002 0208 	and.w	r2, r2, #8
 8001c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fb86 	bl	800535e <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c5c:	d10f      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f005 fc1b 	bl	80074a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fb6b 	bl	800535e <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c92:	d10f      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f005 fbee 	bl	8007480 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fb50 	bl	800535e <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d10a      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f005 fbfc 	bl	80074c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fb3a 	bl	800535e <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d115      	bne.n	8001d20 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f005 fbec 	bl	80074e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	e000      	b.n	8001d20 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d1e:	bf00      	nop
    }
  }
}
 8001d20:	3734      	adds	r7, #52	; 0x34
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}

08001d26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_PCD_SetAddress+0x1a>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e013      	b.n	8001d68 <HAL_PCD_SetAddress+0x42>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fa98 	bl	800528e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	70fb      	strb	r3, [r7, #3]
 8001d82:	460b      	mov	r3, r1
 8001d84:	803b      	strh	r3, [r7, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da0f      	bge.n	8001db6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	3338      	adds	r3, #56	; 0x38
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	705a      	strb	r2, [r3, #1]
 8001db4:	e00f      	b.n	8001dd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001de2:	883a      	ldrh	r2, [r7, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	78ba      	ldrb	r2, [r7, #2]
 8001dec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e00:	78bb      	ldrb	r3, [r7, #2]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d102      	bne.n	8001e0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_PCD_EP_Open+0xaa>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e00e      	b.n	8001e38 <HAL_PCD_EP_Open+0xc8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68f9      	ldr	r1, [r7, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fbcb 	bl	80045c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e36:	7afb      	ldrb	r3, [r7, #11]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	da0f      	bge.n	8001e74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	f003 020f 	and.w	r2, r3, #15
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	3338      	adds	r3, #56	; 0x38
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	705a      	strb	r2, [r3, #1]
 8001e72:	e00f      	b.n	8001e94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 020f 	and.w	r2, r3, #15
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_PCD_EP_Close+0x6e>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e00e      	b.n	8001ecc <HAL_PCD_EP_Close+0x8c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68f9      	ldr	r1, [r7, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fc09 	bl	80046d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f003 020f 	and.w	r2, r3, #15
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	6979      	ldr	r1, [r7, #20]
 8001f48:	f002 fee4 	bl	8004d14 <USB_EP0StartXfer>
 8001f4c:	e008      	b.n	8001f60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6979      	ldr	r1, [r7, #20]
 8001f5c:	f002 fc96 	bl	800488c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f8c:	681b      	ldr	r3, [r3, #0]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	3338      	adds	r3, #56	; 0x38
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d102      	bne.n	8001ff4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	6979      	ldr	r1, [r7, #20]
 800200c:	f002 fe82 	bl	8004d14 <USB_EP0StartXfer>
 8002010:	e008      	b.n	8002024 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	6979      	ldr	r1, [r7, #20]
 8002020:	f002 fc34 	bl	800488c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 020f 	and.w	r2, r3, #15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d901      	bls.n	800204c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e050      	b.n	80020ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800204c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da0f      	bge.n	8002074 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 020f 	and.w	r2, r3, #15
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3338      	adds	r3, #56	; 0x38
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e00d      	b.n	8002090 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	3304      	adds	r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	b2da      	uxtb	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_PCD_EP_SetStall+0x82>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e01e      	b.n	80020ee <HAL_PCD_EP_SetStall+0xc0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 f811 	bl	80050e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020de:	461a      	mov	r2, r3
 80020e0:	f003 fa02 	bl	80054e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 020f 	and.w	r2, r3, #15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	d901      	bls.n	8002114 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e042      	b.n	800219a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002118:	2b00      	cmp	r3, #0
 800211a:	da0f      	bge.n	800213c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	f003 020f 	and.w	r2, r3, #15
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	3338      	adds	r3, #56	; 0x38
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	705a      	strb	r2, [r3, #1]
 800213a:	e00f      	b.n	800215c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 020f 	and.w	r2, r3, #15
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	3304      	adds	r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_PCD_EP_ClrStall+0x86>
 8002178:	2302      	movs	r3, #2
 800217a:	e00e      	b.n	800219a <HAL_PCD_EP_ClrStall+0xa4>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 f819 	bl	80051c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b08a      	sub	sp, #40	; 0x28
 80021a6:	af02      	add	r7, sp, #8
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	3338      	adds	r3, #56	; 0x38
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d901      	bls.n	80021da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06c      	b.n	80022b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d902      	bls.n	80021f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3303      	adds	r3, #3
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021fe:	e02b      	b.n	8002258 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	429a      	cmp	r2, r3
 8002214:	d902      	bls.n	800221c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3303      	adds	r3, #3
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68d9      	ldr	r1, [r3, #12]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002234:	b2db      	uxtb	r3, r3
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4603      	mov	r3, r0
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f002 febd 	bl	8004fba <USB_WritePacket>

    ep->xfer_buff  += len;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	441a      	add	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	b29b      	uxth	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	429a      	cmp	r2, r3
 800226c:	d809      	bhi.n	8002282 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002276:	429a      	cmp	r2, r3
 8002278:	d203      	bcs.n	8002282 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1be      	bne.n	8002200 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	429a      	cmp	r2, r3
 800228c:	d811      	bhi.n	80022b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	2201      	movs	r2, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	6939      	ldr	r1, [r7, #16]
 80022aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022ae:	4013      	ands	r3, r2
 80022b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	333c      	adds	r3, #60	; 0x3c
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f040 80a0 	bne.w	8002434 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a72      	ldr	r2, [pc, #456]	; (80024cc <PCD_EP_OutXfrComplete_int+0x210>)
 8002302:	4293      	cmp	r3, r2
 8002304:	f240 80dd 	bls.w	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80d7 	beq.w	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	e0cb      	b.n	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	2320      	movs	r3, #32
 8002344:	6093      	str	r3, [r2, #8]
 8002346:	e0bc      	b.n	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 80b7 	bne.w	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <PCD_EP_OutXfrComplete_int+0x210>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d90f      	bls.n	800237c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002372:	461a      	mov	r2, r3
 8002374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002378:	6093      	str	r3, [r2, #8]
 800237a:	e0a2      	b.n	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800238e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	0159      	lsls	r1, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	440b      	add	r3, r1
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80023a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4403      	add	r3, r0
 80023b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4403      	add	r3, r0
 80023da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4419      	add	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4403      	add	r3, r0
 80023f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d114      	bne.n	8002426 <PCD_EP_OutXfrComplete_int+0x16a>
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d108      	bne.n	8002426 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800241e:	461a      	mov	r2, r3
 8002420:	2101      	movs	r1, #1
 8002422:	f003 f861 	bl	80054e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f004 ff91 	bl	8007354 <HAL_PCD_DataOutStageCallback>
 8002432:	e046      	b.n	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d124      	bne.n	8002486 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002452:	461a      	mov	r2, r3
 8002454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002458:	6093      	str	r3, [r2, #8]
 800245a:	e032      	b.n	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	461a      	mov	r2, r3
 8002474:	2320      	movs	r3, #32
 8002476:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f004 ff68 	bl	8007354 <HAL_PCD_DataOutStageCallback>
 8002484:	e01d      	b.n	80024c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d114      	bne.n	80024b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d108      	bne.n	80024b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024ae:	461a      	mov	r2, r3
 80024b0:	2100      	movs	r1, #0
 80024b2:	f003 f819 	bl	80054e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f004 ff49 	bl	8007354 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	4f54300a 	.word	0x4f54300a
 80024d0:	4f54310a 	.word	0x4f54310a

080024d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	333c      	adds	r3, #60	; 0x3c
 80024ec:	3304      	adds	r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <PCD_EP_OutSetupPacket_int+0x88>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d90e      	bls.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f004 ff01 	bl	8007330 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <PCD_EP_OutSetupPacket_int+0x88>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d90c      	bls.n	8002550 <PCD_EP_OutSetupPacket_int+0x7c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002548:	461a      	mov	r2, r3
 800254a:	2101      	movs	r1, #1
 800254c:	f002 ffcc 	bl	80054e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	4f54300a 	.word	0x4f54300a

08002560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
 800256c:	4613      	mov	r3, r2
 800256e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800257e:	883b      	ldrh	r3, [r7, #0]
 8002580:	0419      	lsls	r1, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	430a      	orrs	r2, r1
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
 800258c:	e028      	b.n	80025e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e00d      	b.n	80025be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	3340      	adds	r3, #64	; 0x40
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4413      	add	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3ec      	bcc.n	80025a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025c8:	883b      	ldrh	r3, [r7, #0]
 80025ca:	0418      	lsls	r0, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	4302      	orrs	r2, r0
 80025d8:	3340      	adds	r3, #64	; 0x40
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e264      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d075      	beq.n	8002732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002646:	4ba3      	ldr	r3, [pc, #652]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00c      	beq.n	800266c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4ba0      	ldr	r3, [pc, #640]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265a:	2b08      	cmp	r3, #8
 800265c:	d112      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b9d      	ldr	r3, [pc, #628]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266a:	d10b      	bne.n	8002684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05b      	beq.n	8002730 <HAL_RCC_OscConfig+0x108>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d157      	bne.n	8002730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e23f      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x74>
 800268e:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a90      	ldr	r2, [pc, #576]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a8a      	ldr	r2, [pc, #552]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a87      	ldr	r2, [pc, #540]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xb0>
 80026c0:	4b84      	ldr	r3, [pc, #528]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a83      	ldr	r2, [pc, #524]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a80      	ldr	r2, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fa94 	bl	8000c0c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fa90 	bl	8000c0c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e204      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xc0>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fa80 	bl	8000c0c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fa7c 	bl	8000c0c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1f0      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0xe8>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273e:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b5c      	ldr	r3, [pc, #368]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1c4      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4952      	ldr	r1, [pc, #328]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <HAL_RCC_OscConfig+0x2b0>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fa35 	bl	8000c0c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe fa31 	bl	8000c0c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1a5      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4940      	ldr	r1, [pc, #256]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_OscConfig+0x2b0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fa14 	bl	8000c0c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fa10 	bl	8000c0c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e184      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d030      	beq.n	8002874 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_RCC_OscConfig+0x2b4>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe f9f4 	bl	8000c0c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe f9f0 	bl	8000c0c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e164      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x200>
 8002846:	e015      	b.n	8002874 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_RCC_OscConfig+0x2b4>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe f9dd 	bl	8000c0c <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002856:	f7fe f9d9 	bl	8000c0c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e14d      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a0 	beq.w	80029c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x2b8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d121      	bne.n	8002902 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_RCC_OscConfig+0x2b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_RCC_OscConfig+0x2b8>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe f99f 	bl	8000c0c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e011      	b.n	80028f6 <HAL_RCC_OscConfig+0x2ce>
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	42470000 	.word	0x42470000
 80028dc:	42470e80 	.word	0x42470e80
 80028e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7fe f992 	bl	8000c0c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e106      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b85      	ldr	r3, [pc, #532]	; (8002b0c <HAL_RCC_OscConfig+0x4e4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d106      	bne.n	8002918 <HAL_RCC_OscConfig+0x2f0>
 800290a:	4b81      	ldr	r3, [pc, #516]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a80      	ldr	r2, [pc, #512]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	e01c      	b.n	8002952 <HAL_RCC_OscConfig+0x32a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d10c      	bne.n	800293a <HAL_RCC_OscConfig+0x312>
 8002920:	4b7b      	ldr	r3, [pc, #492]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a7a      	ldr	r2, [pc, #488]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
 800292c:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a77      	ldr	r2, [pc, #476]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
 8002938:	e00b      	b.n	8002952 <HAL_RCC_OscConfig+0x32a>
 800293a:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a74      	ldr	r2, [pc, #464]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	4b72      	ldr	r3, [pc, #456]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a71      	ldr	r2, [pc, #452]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d015      	beq.n	8002986 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe f957 	bl	8000c0c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe f953 	bl	8000c0c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0c5      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ee      	beq.n	8002962 <HAL_RCC_OscConfig+0x33a>
 8002984:	e014      	b.n	80029b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7fe f941 	bl	8000c0c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe f93d 	bl	8000c0c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0af      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a4:	4b5a      	ldr	r3, [pc, #360]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ee      	bne.n	800298e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d105      	bne.n	80029c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b6:	4b56      	ldr	r3, [pc, #344]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a55      	ldr	r2, [pc, #340]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 80029bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 809b 	beq.w	8002b02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d05c      	beq.n	8002a92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d141      	bne.n	8002a64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e0:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <HAL_RCC_OscConfig+0x4ec>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe f911 	bl	8000c0c <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe f90d 	bl	8000c0c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e081      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a00:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	019b      	lsls	r3, r3, #6
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	3b01      	subs	r3, #1
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	061b      	lsls	r3, r3, #24
 8002a30:	4937      	ldr	r1, [pc, #220]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_RCC_OscConfig+0x4ec>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe f8e6 	bl	8000c0c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe f8e2 	bl	8000c0c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e056      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x41c>
 8002a62:	e04e      	b.n	8002b02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x4ec>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe f8cf 	bl	8000c0c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe f8cb 	bl	8000c0c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e03f      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x44a>
 8002a90:	e037      	b.n	8002b02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e032      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_RCC_OscConfig+0x4e8>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d028      	beq.n	8002afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d121      	bne.n	8002afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d11a      	bne.n	8002afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ace:	4013      	ands	r3, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d111      	bne.n	8002afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	40023800 	.word	0x40023800
 8002b14:	42470060 	.word	0x42470060

08002b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0cc      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d90c      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a58      	ldr	r2, [pc, #352]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d044      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d119      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e067      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4934      	ldr	r1, [pc, #208]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c08:	f7fe f800 	bl	8000c0c <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fd fffc 	bl	8000c0c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e04f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d20c      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	490a      	ldr	r1, [pc, #40]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd ff60 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	08007950 	.word	0x08007950
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000014 	.word	0x20000014

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cfc:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d00d      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x40>
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	f200 80bd 	bhi.w	8002e88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x34>
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d16:	e0b7      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d1a:	60bb      	str	r3, [r7, #8]
       break;
 8002d1c:	e0b7      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1e:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d20:	60bb      	str	r3, [r7, #8]
      break;
 8002d22:	e0b4      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d24:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d04d      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	461a      	mov	r2, r3
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	ea02 0800 	and.w	r8, r2, r0
 8002d52:	ea03 0901 	and.w	r9, r3, r1
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	014b      	lsls	r3, r1, #5
 8002d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d68:	0142      	lsls	r2, r0, #5
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	ebb0 0008 	subs.w	r0, r0, r8
 8002d72:	eb61 0109 	sbc.w	r1, r1, r9
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d84:	0182      	lsls	r2, r0, #6
 8002d86:	1a12      	subs	r2, r2, r0
 8002d88:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	00d9      	lsls	r1, r3, #3
 8002d96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d9a:	00d0      	lsls	r0, r2, #3
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	eb12 0208 	adds.w	r2, r2, r8
 8002da4:	eb43 0309 	adc.w	r3, r3, r9
 8002da8:	f04f 0000 	mov.w	r0, #0
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	0259      	lsls	r1, r3, #9
 8002db2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002db6:	0250      	lsls	r0, r2, #9
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	f7fd fa04 	bl	80001d4 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e04a      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	ea02 0400 	and.w	r4, r2, r0
 8002dee:	ea03 0501 	and.w	r5, r3, r1
 8002df2:	4620      	mov	r0, r4
 8002df4:	4629      	mov	r1, r5
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	014b      	lsls	r3, r1, #5
 8002e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e04:	0142      	lsls	r2, r0, #5
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	1b00      	subs	r0, r0, r4
 8002e0c:	eb61 0105 	sbc.w	r1, r1, r5
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	018b      	lsls	r3, r1, #6
 8002e1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e1e:	0182      	lsls	r2, r0, #6
 8002e20:	1a12      	subs	r2, r2, r0
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	00d9      	lsls	r1, r3, #3
 8002e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e34:	00d0      	lsls	r0, r2, #3
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	1912      	adds	r2, r2, r4
 8002e3c:	eb45 0303 	adc.w	r3, r5, r3
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	0299      	lsls	r1, r3, #10
 8002e4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e4e:	0290      	lsls	r0, r2, #10
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f7fd f9b8 	bl	80001d4 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	3301      	adds	r3, #1
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	60bb      	str	r3, [r7, #8]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e8a:	60bb      	str	r3, [r7, #8]
      break;
 8002e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	007a1200 	.word	0x007a1200

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ec4:	f7ff fff0 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4903      	ldr	r1, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08007960 	.word	0x08007960

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eec:	f7ff ffdc 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0b5b      	lsrs	r3, r3, #13
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08007960 	.word	0x08007960

08002f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e03f      	b.n	8002fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fbe2 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fe15 	bl	8003b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d17c      	bne.n	80030c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_UART_Transmit+0x2c>
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e075      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit+0x3e>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e06e      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2221      	movs	r2, #33	; 0x21
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ffe:	f7fd fe05 	bl	8000c0c <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003018:	d108      	bne.n	800302c <HAL_UART_Transmit+0x82>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e003      	b.n	8003034 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800303c:	e02a      	b.n	8003094 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fb59 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e036      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10b      	bne.n	8003076 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800306c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3302      	adds	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e007      	b.n	8003086 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1cf      	bne.n	800303e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fb29 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e006      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d130      	bne.n	800314a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_UART_Transmit_IT+0x26>
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e029      	b.n	800314c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_UART_Transmit_IT+0x38>
 8003102:	2302      	movs	r3, #2
 8003104:	e022      	b.n	800314c <HAL_UART_Transmit_IT+0x7e>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	88fa      	ldrh	r2, [r7, #6]
 800311e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2221      	movs	r2, #33	; 0x21
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003144:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b20      	cmp	r3, #32
 8003170:	d11d      	bne.n	80031ae <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_UART_Receive_IT+0x26>
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e016      	b.n	80031b0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_UART_Receive_IT+0x38>
 800318c:	2302      	movs	r3, #2
 800318e:	e00f      	b.n	80031b0 <HAL_UART_Receive_IT+0x58>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	461a      	mov	r2, r3
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fb19 	bl	80037dc <UART_Start_Receive_IT>
 80031aa:	4603      	mov	r3, r0
 80031ac:	e000      	b.n	80031b0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b0ba      	sub	sp, #232	; 0xe8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <HAL_UART_IRQHandler+0x66>
 800320a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fbf9 	bl	8003a0e <UART_Receive_IT>
      return;
 800321c:	e256      	b.n	80036cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800321e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80de 	beq.w	80033e4 <HAL_UART_IRQHandler+0x22c>
 8003228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003238:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80d1 	beq.w	80033e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_UART_IRQHandler+0xae>
 800324e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_UART_IRQHandler+0xd2>
 8003272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f043 0202 	orr.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800328a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_UART_IRQHandler+0xf6>
 8003296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0204 	orr.w	r2, r3, #4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <HAL_UART_IRQHandler+0x126>
 80032ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0208 	orr.w	r2, r3, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 81ed 	beq.w	80036c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_UART_IRQHandler+0x14e>
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fb84 	bl	8003a0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <HAL_UART_IRQHandler+0x17a>
 800332a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04f      	beq.n	80033d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa8c 	bl	8003850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d141      	bne.n	80033ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3314      	adds	r3, #20
 800334c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800335c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800337e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800338a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1d9      	bne.n	8003346 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	2b00      	cmp	r3, #0
 8003398:	d013      	beq.n	80033c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	4a7d      	ldr	r2, [pc, #500]	; (8003594 <HAL_UART_IRQHandler+0x3dc>)
 80033a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fde1 	bl	8000f6e <HAL_DMA_Abort_IT>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033bc:	4610      	mov	r0, r2
 80033be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e00e      	b.n	80033e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f986 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e00a      	b.n	80033e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f982 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e006      	b.n	80033e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f97e 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033de:	e170      	b.n	80036c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	bf00      	nop
    return;
 80033e2:	e16e      	b.n	80036c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	f040 814a 	bne.w	8003682 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8143 	beq.w	8003682 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 813c 	beq.w	8003682 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	f040 80b4 	bne.w	8003598 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800343c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8140 	beq.w	80036c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800344a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800344e:	429a      	cmp	r2, r3
 8003450:	f080 8139 	bcs.w	80036c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800345a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003466:	f000 8088 	beq.w	800357a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800349a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1d9      	bne.n	800346a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3314      	adds	r3, #20
 80034bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3314      	adds	r3, #20
 80034d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e1      	bne.n	80034b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003516:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003518:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800351c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e3      	bne.n	80034f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354a:	f023 0310 	bic.w	r3, r3, #16
 800354e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800355c:	65ba      	str	r2, [r7, #88]	; 0x58
 800355e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e3      	bne.n	8003538 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fc8a 	bl	8000e8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003582:	b29b      	uxth	r3, r3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8ac 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003590:	e099      	b.n	80036c6 <HAL_UART_IRQHandler+0x50e>
 8003592:	bf00      	nop
 8003594:	08003917 	.word	0x08003917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 808b 	beq.w	80036ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8086 	beq.w	80036ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035e2:	647a      	str	r2, [r7, #68]	; 0x44
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e3      	bne.n	80035be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3314      	adds	r3, #20
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	623b      	str	r3, [r7, #32]
   return(result);
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800361a:	633a      	str	r2, [r7, #48]	; 0x30
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e3      	bne.n	80035f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	60fb      	str	r3, [r7, #12]
   return(result);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0310 	bic.w	r3, r3, #16
 8003652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003660:	61fa      	str	r2, [r7, #28]
 8003662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	69b9      	ldr	r1, [r7, #24]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	617b      	str	r3, [r7, #20]
   return(result);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e3      	bne.n	800363c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f834 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003680:	e023      	b.n	80036ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_UART_IRQHandler+0x4ea>
 800368e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f94f 	bl	800393e <UART_Transmit_IT>
    return;
 80036a0:	e014      	b.n	80036cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00e      	beq.n	80036cc <HAL_UART_IRQHandler+0x514>
 80036ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f98f 	bl	80039de <UART_EndTransmit_IT>
    return;
 80036c0:	e004      	b.n	80036cc <HAL_UART_IRQHandler+0x514>
    return;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <HAL_UART_IRQHandler+0x514>
      return;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_UART_IRQHandler+0x514>
      return;
 80036ca:	bf00      	nop
  }
}
 80036cc:	37e8      	adds	r7, #232	; 0xe8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop

080036d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b090      	sub	sp, #64	; 0x40
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003710:	e050      	b.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003718:	d04c      	beq.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800371a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <UART_WaitOnFlagUntilTimeout+0x30>
 8003720:	f7fd fa74 	bl	8000c0c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372c:	429a      	cmp	r2, r3
 800372e:	d241      	bcs.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003750:	637a      	str	r2, [r7, #52]	; 0x34
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	613b      	str	r3, [r7, #16]
   return(result);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003784:	623a      	str	r2, [r7, #32]
 8003786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	69f9      	ldr	r1, [r7, #28]
 800378a:	6a3a      	ldr	r2, [r7, #32]
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	61bb      	str	r3, [r7, #24]
   return(result);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e5      	bne.n	8003764 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e00f      	b.n	80037d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d09f      	beq.n	8003712 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3740      	adds	r7, #64	; 0x40
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	88fa      	ldrh	r2, [r7, #6]
 80037f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	88fa      	ldrh	r2, [r7, #6]
 80037fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2222      	movs	r2, #34	; 0x22
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003850:	b480      	push	{r7}
 8003852:	b095      	sub	sp, #84	; 0x54
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	330c      	adds	r3, #12
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800386e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003878:	643a      	str	r2, [r7, #64]	; 0x40
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800387e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3314      	adds	r3, #20
 8003892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	61fb      	str	r3, [r7, #28]
   return(result);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3314      	adds	r3, #20
 80038aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e5      	bne.n	800388c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d119      	bne.n	80038fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f023 0310 	bic.w	r3, r3, #16
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038e8:	61ba      	str	r2, [r7, #24]
 80038ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	613b      	str	r3, [r7, #16]
   return(result);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e5      	bne.n	80038c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800390a:	bf00      	nop
 800390c:	3754      	adds	r7, #84	; 0x54
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff fecf 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b21      	cmp	r3, #33	; 0x21
 8003950:	d13e      	bne.n	80039d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d114      	bne.n	8003986 <UART_Transmit_IT+0x48>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d110      	bne.n	8003986 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003978:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	1c9a      	adds	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	621a      	str	r2, [r3, #32]
 8003984:	e008      	b.n	8003998 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6211      	str	r1, [r2, #32]
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4619      	mov	r1, r3
 80039a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10f      	bne.n	80039cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd f886 	bl	8000b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b08c      	sub	sp, #48	; 0x30
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b22      	cmp	r3, #34	; 0x22
 8003a20:	f040 80ab 	bne.w	8003b7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2c:	d117      	bne.n	8003a5e <UART_Receive_IT+0x50>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d113      	bne.n	8003a5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a5c:	e026      	b.n	8003aac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a70:	d007      	beq.n	8003a82 <UART_Receive_IT+0x74>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <UART_Receive_IT+0x82>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	e008      	b.n	8003aa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d15a      	bne.n	8003b76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0220 	bic.w	r2, r2, #32
 8003ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d135      	bne.n	8003b6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	613b      	str	r3, [r7, #16]
   return(result);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f023 0310 	bic.w	r3, r3, #16
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	623a      	str	r2, [r7, #32]
 8003b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	69f9      	ldr	r1, [r7, #28]
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d10a      	bne.n	8003b5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fdbf 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
 8003b6a:	e002      	b.n	8003b72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fc ff6b 	bl	8000a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e002      	b.n	8003b7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
  }
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3730      	adds	r7, #48	; 0x30
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	b09f      	sub	sp, #124	; 0x7c
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9a:	68d9      	ldr	r1, [r3, #12]
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	ea40 0301 	orr.w	r3, r0, r1
 8003ba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bc8:	f021 010c 	bic.w	r1, r1, #12
 8003bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be2:	6999      	ldr	r1, [r3, #24]
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	ea40 0301 	orr.w	r3, r0, r1
 8003bec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4bc5      	ldr	r3, [pc, #788]	; (8003f08 <UART_SetConfig+0x384>)
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d004      	beq.n	8003c02 <UART_SetConfig+0x7e>
 8003bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4bc3      	ldr	r3, [pc, #780]	; (8003f0c <UART_SetConfig+0x388>)
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d103      	bne.n	8003c0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c02:	f7ff f971 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8003c06:	6778      	str	r0, [r7, #116]	; 0x74
 8003c08:	e002      	b.n	8003c10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c0a:	f7ff f959 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8003c0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	f040 80b6 	bne.w	8003d88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1e:	461c      	mov	r4, r3
 8003c20:	f04f 0500 	mov.w	r5, #0
 8003c24:	4622      	mov	r2, r4
 8003c26:	462b      	mov	r3, r5
 8003c28:	1891      	adds	r1, r2, r2
 8003c2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003c2c:	415b      	adcs	r3, r3
 8003c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c34:	1912      	adds	r2, r2, r4
 8003c36:	eb45 0303 	adc.w	r3, r5, r3
 8003c3a:	f04f 0000 	mov.w	r0, #0
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	00d9      	lsls	r1, r3, #3
 8003c44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c48:	00d0      	lsls	r0, r2, #3
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	1911      	adds	r1, r2, r4
 8003c50:	6639      	str	r1, [r7, #96]	; 0x60
 8003c52:	416b      	adcs	r3, r5
 8003c54:	667b      	str	r3, [r7, #100]	; 0x64
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c64:	415b      	adcs	r3, r3
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c70:	f7fc fab0 	bl	80001d4 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4ba5      	ldr	r3, [pc, #660]	; (8003f10 <UART_SetConfig+0x38c>)
 8003c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	011e      	lsls	r6, r3, #4
 8003c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c84:	461c      	mov	r4, r3
 8003c86:	f04f 0500 	mov.w	r5, #0
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	1891      	adds	r1, r2, r2
 8003c90:	6339      	str	r1, [r7, #48]	; 0x30
 8003c92:	415b      	adcs	r3, r3
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
 8003c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c9a:	1912      	adds	r2, r2, r4
 8003c9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ca0:	f04f 0000 	mov.w	r0, #0
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	00d9      	lsls	r1, r3, #3
 8003caa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cae:	00d0      	lsls	r0, r2, #3
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	1911      	adds	r1, r2, r4
 8003cb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cb8:	416b      	adcs	r3, r5
 8003cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	1891      	adds	r1, r2, r2
 8003cc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cca:	415b      	adcs	r3, r3
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003cd6:	f7fc fa7d 	bl	80001d4 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4b8c      	ldr	r3, [pc, #560]	; (8003f10 <UART_SetConfig+0x38c>)
 8003ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	2164      	movs	r1, #100	; 0x64
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	3332      	adds	r3, #50	; 0x32
 8003cf2:	4a87      	ldr	r2, [pc, #540]	; (8003f10 <UART_SetConfig+0x38c>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d00:	441e      	add	r6, r3
 8003d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d04:	4618      	mov	r0, r3
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	1894      	adds	r4, r2, r2
 8003d10:	623c      	str	r4, [r7, #32]
 8003d12:	415b      	adcs	r3, r3
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
 8003d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1a:	1812      	adds	r2, r2, r0
 8003d1c:	eb41 0303 	adc.w	r3, r1, r3
 8003d20:	f04f 0400 	mov.w	r4, #0
 8003d24:	f04f 0500 	mov.w	r5, #0
 8003d28:	00dd      	lsls	r5, r3, #3
 8003d2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d2e:	00d4      	lsls	r4, r2, #3
 8003d30:	4622      	mov	r2, r4
 8003d32:	462b      	mov	r3, r5
 8003d34:	1814      	adds	r4, r2, r0
 8003d36:	653c      	str	r4, [r7, #80]	; 0x50
 8003d38:	414b      	adcs	r3, r1
 8003d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	1891      	adds	r1, r2, r2
 8003d48:	61b9      	str	r1, [r7, #24]
 8003d4a:	415b      	adcs	r3, r3
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d56:	f7fc fa3d 	bl	80001d4 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4b6c      	ldr	r3, [pc, #432]	; (8003f10 <UART_SetConfig+0x38c>)
 8003d60:	fba3 1302 	umull	r1, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	2164      	movs	r1, #100	; 0x64
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	3332      	adds	r3, #50	; 0x32
 8003d72:	4a67      	ldr	r2, [pc, #412]	; (8003f10 <UART_SetConfig+0x38c>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	f003 0207 	and.w	r2, r3, #7
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4432      	add	r2, r6
 8003d84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d86:	e0b9      	b.n	8003efc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8a:	461c      	mov	r4, r3
 8003d8c:	f04f 0500 	mov.w	r5, #0
 8003d90:	4622      	mov	r2, r4
 8003d92:	462b      	mov	r3, r5
 8003d94:	1891      	adds	r1, r2, r2
 8003d96:	6139      	str	r1, [r7, #16]
 8003d98:	415b      	adcs	r3, r3
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003da0:	1912      	adds	r2, r2, r4
 8003da2:	eb45 0303 	adc.w	r3, r5, r3
 8003da6:	f04f 0000 	mov.w	r0, #0
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	00d9      	lsls	r1, r3, #3
 8003db0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003db4:	00d0      	lsls	r0, r2, #3
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	eb12 0804 	adds.w	r8, r2, r4
 8003dbe:	eb43 0905 	adc.w	r9, r3, r5
 8003dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	008b      	lsls	r3, r1, #2
 8003dd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dda:	0082      	lsls	r2, r0, #2
 8003ddc:	4640      	mov	r0, r8
 8003dde:	4649      	mov	r1, r9
 8003de0:	f7fc f9f8 	bl	80001d4 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b49      	ldr	r3, [pc, #292]	; (8003f10 <UART_SetConfig+0x38c>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	011e      	lsls	r6, r3, #4
 8003df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df4:	4618      	mov	r0, r3
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	1894      	adds	r4, r2, r2
 8003e00:	60bc      	str	r4, [r7, #8]
 8003e02:	415b      	adcs	r3, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e0a:	1812      	adds	r2, r2, r0
 8003e0c:	eb41 0303 	adc.w	r3, r1, r3
 8003e10:	f04f 0400 	mov.w	r4, #0
 8003e14:	f04f 0500 	mov.w	r5, #0
 8003e18:	00dd      	lsls	r5, r3, #3
 8003e1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e1e:	00d4      	lsls	r4, r2, #3
 8003e20:	4622      	mov	r2, r4
 8003e22:	462b      	mov	r3, r5
 8003e24:	1814      	adds	r4, r2, r0
 8003e26:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e28:	414b      	adcs	r3, r1
 8003e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	008b      	lsls	r3, r1, #2
 8003e40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e44:	0082      	lsls	r2, r0, #2
 8003e46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e4a:	f7fc f9c3 	bl	80001d4 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <UART_SetConfig+0x38c>)
 8003e54:	fba3 1302 	umull	r1, r3, r3, r2
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	2164      	movs	r1, #100	; 0x64
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	3332      	adds	r3, #50	; 0x32
 8003e66:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <UART_SetConfig+0x38c>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e72:	441e      	add	r6, r3
 8003e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e76:	4618      	mov	r0, r3
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	1894      	adds	r4, r2, r2
 8003e82:	603c      	str	r4, [r7, #0]
 8003e84:	415b      	adcs	r3, r3
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e8c:	1812      	adds	r2, r2, r0
 8003e8e:	eb41 0303 	adc.w	r3, r1, r3
 8003e92:	f04f 0400 	mov.w	r4, #0
 8003e96:	f04f 0500 	mov.w	r5, #0
 8003e9a:	00dd      	lsls	r5, r3, #3
 8003e9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ea0:	00d4      	lsls	r4, r2, #3
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	eb12 0a00 	adds.w	sl, r2, r0
 8003eaa:	eb43 0b01 	adc.w	fp, r3, r1
 8003eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f04f 0100 	mov.w	r1, #0
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	008b      	lsls	r3, r1, #2
 8003ec2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ec6:	0082      	lsls	r2, r0, #2
 8003ec8:	4650      	mov	r0, sl
 8003eca:	4659      	mov	r1, fp
 8003ecc:	f7fc f982 	bl	80001d4 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <UART_SetConfig+0x38c>)
 8003ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2164      	movs	r1, #100	; 0x64
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	3332      	adds	r3, #50	; 0x32
 8003ee8:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <UART_SetConfig+0x38c>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4432      	add	r2, r6
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	377c      	adds	r7, #124	; 0x7c
 8003f00:	46bd      	mov	sp, r7
 8003f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f06:	bf00      	nop
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40011400 	.word	0x40011400
 8003f10:	51eb851f 	.word	0x51eb851f

08003f14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f14:	b084      	sub	sp, #16
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	f107 001c 	add.w	r0, r7, #28
 8003f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d122      	bne.n	8003f72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f001 fb1c 	bl	80055a4 <USB_CoreReset>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e01a      	b.n	8003fa8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f001 fb10 	bl	80055a4 <USB_CoreReset>
 8003f84:	4603      	mov	r3, r0
 8003f86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
 8003f9a:	e005      	b.n	8003fa8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10b      	bne.n	8003fc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f043 0206 	orr.w	r2, r3, #6
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd2:	b004      	add	sp, #16
 8003fd4:	4770      	bx	lr
	...

08003fd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d165      	bne.n	80040b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a41      	ldr	r2, [pc, #260]	; (80040f4 <USB_SetTurnaroundTime+0x11c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d906      	bls.n	8004002 <USB_SetTurnaroundTime+0x2a>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a40      	ldr	r2, [pc, #256]	; (80040f8 <USB_SetTurnaroundTime+0x120>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d202      	bcs.n	8004002 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ffc:	230f      	movs	r3, #15
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e062      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <USB_SetTurnaroundTime+0x120>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d306      	bcc.n	8004018 <USB_SetTurnaroundTime+0x40>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <USB_SetTurnaroundTime+0x124>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d202      	bcs.n	8004018 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004012:	230e      	movs	r3, #14
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e057      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a38      	ldr	r2, [pc, #224]	; (80040fc <USB_SetTurnaroundTime+0x124>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d306      	bcc.n	800402e <USB_SetTurnaroundTime+0x56>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a37      	ldr	r2, [pc, #220]	; (8004100 <USB_SetTurnaroundTime+0x128>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d202      	bcs.n	800402e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004028:	230d      	movs	r3, #13
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e04c      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4a33      	ldr	r2, [pc, #204]	; (8004100 <USB_SetTurnaroundTime+0x128>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d306      	bcc.n	8004044 <USB_SetTurnaroundTime+0x6c>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a32      	ldr	r2, [pc, #200]	; (8004104 <USB_SetTurnaroundTime+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d802      	bhi.n	8004044 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800403e:	230c      	movs	r3, #12
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e041      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <USB_SetTurnaroundTime+0x12c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d906      	bls.n	800405a <USB_SetTurnaroundTime+0x82>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <USB_SetTurnaroundTime+0x130>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d802      	bhi.n	800405a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004054:	230b      	movs	r3, #11
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e036      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4a2a      	ldr	r2, [pc, #168]	; (8004108 <USB_SetTurnaroundTime+0x130>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d906      	bls.n	8004070 <USB_SetTurnaroundTime+0x98>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a29      	ldr	r2, [pc, #164]	; (800410c <USB_SetTurnaroundTime+0x134>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d802      	bhi.n	8004070 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800406a:	230a      	movs	r3, #10
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e02b      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a26      	ldr	r2, [pc, #152]	; (800410c <USB_SetTurnaroundTime+0x134>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d906      	bls.n	8004086 <USB_SetTurnaroundTime+0xae>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a25      	ldr	r2, [pc, #148]	; (8004110 <USB_SetTurnaroundTime+0x138>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d202      	bcs.n	8004086 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004080:	2309      	movs	r3, #9
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e020      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4a21      	ldr	r2, [pc, #132]	; (8004110 <USB_SetTurnaroundTime+0x138>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d306      	bcc.n	800409c <USB_SetTurnaroundTime+0xc4>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <USB_SetTurnaroundTime+0x13c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d802      	bhi.n	800409c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004096:	2308      	movs	r3, #8
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e015      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <USB_SetTurnaroundTime+0x13c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d906      	bls.n	80040b2 <USB_SetTurnaroundTime+0xda>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <USB_SetTurnaroundTime+0x140>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d202      	bcs.n	80040b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040ac:	2307      	movs	r3, #7
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e00a      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040b2:	2306      	movs	r3, #6
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	e007      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040be:	2309      	movs	r3, #9
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e001      	b.n	80040c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040c4:	2309      	movs	r3, #9
 80040c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	029b      	lsls	r3, r3, #10
 80040dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	00d8acbf 	.word	0x00d8acbf
 80040f8:	00e4e1c0 	.word	0x00e4e1c0
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	01067380 	.word	0x01067380
 8004104:	011a499f 	.word	0x011a499f
 8004108:	01312cff 	.word	0x01312cff
 800410c:	014ca43f 	.word	0x014ca43f
 8004110:	016e3600 	.word	0x016e3600
 8004114:	01a6ab1f 	.word	0x01a6ab1f
 8004118:	01e84800 	.word	0x01e84800

0800411c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f043 0201 	orr.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d115      	bne.n	80041ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800418e:	2001      	movs	r0, #1
 8004190:	f7fc fd48 	bl	8000c24 <HAL_Delay>
      ms++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 f972 	bl	8005484 <USB_GetMode>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d01e      	beq.n	80041e4 <USB_SetCurrentMode+0x84>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b31      	cmp	r3, #49	; 0x31
 80041aa:	d9f0      	bls.n	800418e <USB_SetCurrentMode+0x2e>
 80041ac:	e01a      	b.n	80041e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d115      	bne.n	80041e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041c0:	2001      	movs	r0, #1
 80041c2:	f7fc fd2f 	bl	8000c24 <HAL_Delay>
      ms++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f001 f959 	bl	8005484 <USB_GetMode>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <USB_SetCurrentMode+0x84>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b31      	cmp	r3, #49	; 0x31
 80041dc:	d9f0      	bls.n	80041c0 <USB_SetCurrentMode+0x60>
 80041de:	e001      	b.n	80041e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e005      	b.n	80041f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b32      	cmp	r3, #50	; 0x32
 80041e8:	d101      	bne.n	80041ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041f8:	b084      	sub	sp, #16
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	e009      	b.n	800422c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3340      	adds	r3, #64	; 0x40
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	3301      	adds	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0e      	cmp	r3, #14
 8004230:	d9f2      	bls.n	8004218 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11c      	bne.n	8004272 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004246:	f043 0302 	orr.w	r3, r3, #2
 800424a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
 8004270:	e00b      	b.n	800428a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	4619      	mov	r1, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	461a      	mov	r2, r3
 80042a6:	680b      	ldr	r3, [r1, #0]
 80042a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10c      	bne.n	80042ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042b6:	2100      	movs	r1, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f945 	bl	8004548 <USB_SetDevSpeed>
 80042be:	e008      	b.n	80042d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042c0:	2101      	movs	r1, #1
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f940 	bl	8004548 <USB_SetDevSpeed>
 80042c8:	e003      	b.n	80042d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ca:	2103      	movs	r1, #3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f93b 	bl	8004548 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042d2:	2110      	movs	r1, #16
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8f3 	bl	80044c0 <USB_FlushTxFifo>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f90f 	bl	8004508 <USB_FlushRxFifo>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	461a      	mov	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	461a      	mov	r2, r3
 8004308:	2300      	movs	r3, #0
 800430a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e043      	b.n	80043a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004334:	d118      	bne.n	8004368 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e013      	b.n	800437a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	461a      	mov	r2, r3
 8004360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e008      	b.n	800437a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	461a      	mov	r2, r3
 800439a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800439e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3301      	adds	r3, #1
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d3b7      	bcc.n	800431e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e043      	b.n	800443c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ca:	d118      	bne.n	80043fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043de:	461a      	mov	r2, r3
 80043e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e013      	b.n	8004410 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e008      	b.n	8004410 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	2300      	movs	r3, #0
 800440e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	461a      	mov	r2, r3
 8004430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d3b7      	bcc.n	80043b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004456:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004464:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f043 0210 	orr.w	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <USB_DevInit+0x2c4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f043 0208 	orr.w	r2, r3, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044b8:	b004      	add	sp, #16
 80044ba:	4770      	bx	lr
 80044bc:	803c3800 	.word	0x803c3800

080044c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	4a08      	ldr	r2, [pc, #32]	; (8004504 <USB_FlushTxFifo+0x44>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e006      	b.n	80044f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d0f1      	beq.n	80044da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	00030d40 	.word	0x00030d40

08004508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2210      	movs	r2, #16
 8004518:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3301      	adds	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <USB_FlushRxFifo+0x3c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e006      	b.n	8004538 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d0f1      	beq.n	800451a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	00030d40 	.word	0x00030d40

08004548 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b087      	sub	sp, #28
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0306 	and.w	r3, r3, #6
 8004592:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
 800459e:	e00a      	b.n	80045b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d002      	beq.n	80045ac <USB_GetDevSpeed+0x32>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d102      	bne.n	80045b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045ac:	2302      	movs	r3, #2
 80045ae:	75fb      	strb	r3, [r7, #23]
 80045b0:	e001      	b.n	80045b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045b2:	230f      	movs	r3, #15
 80045b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	785b      	ldrb	r3, [r3, #1]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d13a      	bne.n	8004656 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	2101      	movs	r1, #1
 80045f2:	fa01 f303 	lsl.w	r3, r1, r3
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045fe:	4313      	orrs	r3, r2
 8004600:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d155      	bne.n	80046c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	78db      	ldrb	r3, [r3, #3]
 8004632:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004634:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	059b      	lsls	r3, r3, #22
 800463a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800463c:	4313      	orrs	r3, r2
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	e036      	b.n	80046c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	2101      	movs	r1, #1
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004674:	4313      	orrs	r3, r2
 8004676:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11a      	bne.n	80046c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	78db      	ldrb	r3, [r3, #3]
 80046a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046aa:	430b      	orrs	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d161      	bne.n	80047b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004706:	d11f      	bne.n	8004748 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004726:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004768:	4013      	ands	r3, r2
 800476a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	2101      	movs	r1, #1
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	b29b      	uxth	r3, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800478c:	4013      	ands	r3, r2
 800478e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	0159      	lsls	r1, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	440b      	add	r3, r1
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	4619      	mov	r1, r3
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <USB_DeactivateEndpoint+0x1b0>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
 80047b2:	e060      	b.n	8004876 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ca:	d11f      	bne.n	800480c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800480a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f303 	lsl.w	r3, r1, r3
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	43db      	mvns	r3, r3
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482c:	4013      	ands	r3, r2
 800482e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	2101      	movs	r1, #1
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	43db      	mvns	r3, r3
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004850:	4013      	ands	r3, r2
 8004852:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	0159      	lsls	r1, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	440b      	add	r3, r1
 800486a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486e:	4619      	mov	r1, r3
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <USB_DeactivateEndpoint+0x1b4>)
 8004872:	4013      	ands	r3, r2
 8004874:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	ec337800 	.word	0xec337800
 8004888:	eff37800 	.word	0xeff37800

0800488c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f040 815c 	bne.w	8004b66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d132      	bne.n	800491c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004914:	0cdb      	lsrs	r3, r3, #19
 8004916:	04db      	lsls	r3, r3, #19
 8004918:	6113      	str	r3, [r2, #16]
 800491a:	e074      	b.n	8004a06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	0cdb      	lsrs	r3, r3, #19
 8004938:	04db      	lsls	r3, r3, #19
 800493a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004956:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800495a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800495e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6959      	ldr	r1, [r3, #20]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	440b      	add	r3, r1
 8004978:	1e59      	subs	r1, r3, #1
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004982:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004984:	4b9d      	ldr	r3, [pc, #628]	; (8004bfc <USB_EPStartXfer+0x370>)
 8004986:	400b      	ands	r3, r1
 8004988:	69b9      	ldr	r1, [r7, #24]
 800498a:	0148      	lsls	r0, r1, #5
 800498c:	69f9      	ldr	r1, [r7, #28]
 800498e:	4401      	add	r1, r0
 8004990:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004994:	4313      	orrs	r3, r2
 8004996:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	0148      	lsls	r0, r1, #5
 80049b2:	69f9      	ldr	r1, [r7, #28]
 80049b4:	4401      	add	r1, r0
 80049b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049ba:	4313      	orrs	r3, r2
 80049bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d11f      	bne.n	8004a06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d14b      	bne.n	8004aa4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	78db      	ldrb	r3, [r3, #3]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d128      	bne.n	8004a82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d110      	bne.n	8004a62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e00f      	b.n	8004a82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e12f      	b.n	8004d04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ac2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d015      	beq.n	8004af8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8117 	beq.w	8004d04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af2:	4313      	orrs	r3, r2
 8004af4:	634b      	str	r3, [r1, #52]	; 0x34
 8004af6:	e105      	b.n	8004d04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d110      	bne.n	8004b2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	e00f      	b.n	8004b4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	68d9      	ldr	r1, [r3, #12]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	b298      	uxth	r0, r3
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fa2b 	bl	8004fba <USB_WritePacket>
 8004b64:	e0ce      	b.n	8004d04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	0151      	lsls	r1, r2, #5
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	440a      	add	r2, r1
 8004b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b80:	0cdb      	lsrs	r3, r3, #19
 8004b82:	04db      	lsls	r3, r3, #19
 8004b84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ba4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ba8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d126      	bne.n	8004c00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	0148      	lsls	r0, r1, #5
 8004bcc:	69f9      	ldr	r1, [r7, #28]
 8004bce:	4401      	add	r1, r0
 8004bd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf6:	6113      	str	r3, [r2, #16]
 8004bf8:	e036      	b.n	8004c68 <USB_EPStartXfer+0x3dc>
 8004bfa:	bf00      	nop
 8004bfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	8afb      	ldrh	r3, [r7, #22]
 8004c26:	04d9      	lsls	r1, r3, #19
 8004c28:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <USB_EPStartXfer+0x484>)
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	0148      	lsls	r0, r1, #5
 8004c30:	69f9      	ldr	r1, [r7, #28]
 8004c32:	4401      	add	r1, r0
 8004c34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	8af9      	ldrh	r1, [r7, #22]
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	0148      	lsls	r0, r1, #5
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	4401      	add	r1, r0
 8004c60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c64:	4313      	orrs	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d10d      	bne.n	8004c8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68d9      	ldr	r1, [r3, #12]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	460a      	mov	r2, r1
 8004c88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	78db      	ldrb	r3, [r3, #3]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d128      	bne.n	8004ce4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d110      	bne.n	8004cc4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e00f      	b.n	8004ce4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	1ff80000 	.word	0x1ff80000

08004d14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 80cd 	bne.w	8004ed0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d132      	bne.n	8004da4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	0cdb      	lsrs	r3, r3, #19
 8004d9e:	04db      	lsls	r3, r3, #19
 8004da0:	6113      	str	r3, [r2, #16]
 8004da2:	e04e      	b.n	8004e42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	0cdb      	lsrs	r3, r3, #19
 8004dc0:	04db      	lsls	r3, r3, #19
 8004dc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004de6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d903      	bls.n	8004dfc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e32:	6939      	ldr	r1, [r7, #16]
 8004e34:	0148      	lsls	r0, r1, #5
 8004e36:	6979      	ldr	r1, [r7, #20]
 8004e38:	4401      	add	r1, r0
 8004e3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d11e      	bne.n	8004e86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	e092      	b.n	8004fac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d07e      	beq.n	8004fac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	6979      	ldr	r1, [r7, #20]
 8004ec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	634b      	str	r3, [r1, #52]	; 0x34
 8004ece:	e06d      	b.n	8004fac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eea:	0cdb      	lsrs	r3, r3, #19
 8004eec:	04db      	lsls	r3, r3, #19
 8004eee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f12:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5a:	6939      	ldr	r1, [r7, #16]
 8004f5c:	0148      	lsls	r0, r1, #5
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	4401      	add	r1, r0
 8004f62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10d      	bne.n	8004f8c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d009      	beq.n	8004f8c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	68d9      	ldr	r1, [r3, #12]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	460a      	mov	r2, r1
 8004f8a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b089      	sub	sp, #36	; 0x24
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	460b      	mov	r3, r1
 8004fca:	71fb      	strb	r3, [r7, #7]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d123      	bne.n	8005028 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fe0:	88bb      	ldrh	r3, [r7, #4]
 8004fe2:	3303      	adds	r3, #3
 8004fe4:	089b      	lsrs	r3, r3, #2
 8004fe6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	e018      	b.n	8005020 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	031a      	lsls	r2, r3, #12
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3301      	adds	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	3301      	adds	r3, #1
 8005018:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	3301      	adds	r3, #1
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	429a      	cmp	r2, r3
 8005026:	d3e2      	bcc.n	8004fee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3724      	adds	r7, #36	; 0x24
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005036:	b480      	push	{r7}
 8005038:	b08b      	sub	sp, #44	; 0x2c
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	4613      	mov	r3, r2
 8005042:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	b29b      	uxth	r3, r3
 8005052:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	623b      	str	r3, [r7, #32]
 8005060:	e014      	b.n	800508c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	601a      	str	r2, [r3, #0]
    pDest++;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	3301      	adds	r3, #1
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	3301      	adds	r3, #1
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	3301      	adds	r3, #1
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	3301      	adds	r3, #1
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	3301      	adds	r3, #1
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	6a3a      	ldr	r2, [r7, #32]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	d3e6      	bcc.n	8005062 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01e      	beq.n	80050d8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a4:	461a      	mov	r2, r3
 80050a6:	f107 0310 	add.w	r3, r7, #16
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	701a      	strb	r2, [r3, #0]
      i++;
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	3301      	adds	r3, #1
 80050c4:	623b      	str	r3, [r7, #32]
      pDest++;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	3301      	adds	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050d2:	8bfb      	ldrh	r3, [r7, #30]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ea      	bne.n	80050ae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050da:	4618      	mov	r0, r3
 80050dc:	372c      	adds	r7, #44	; 0x2c
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d12c      	bne.n	800515c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	db12      	blt.n	800513a <USB_EPSetStall+0x54>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00f      	beq.n	800513a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005138:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e02b      	b.n	80051b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	db12      	blt.n	8005194 <USB_EPSetStall+0xae>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00f      	beq.n	8005194 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005192:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	0151      	lsls	r1, r2, #5
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	440a      	add	r2, r1
 80051aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d128      	bne.n	8005230 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	78db      	ldrb	r3, [r3, #3]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d003      	beq.n	800520e <USB_EPClearStall+0x4c>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d138      	bne.n	8005280 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e027      	b.n	8005280 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800524e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	78db      	ldrb	r3, [r3, #3]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d003      	beq.n	8005260 <USB_EPClearStall+0x9e>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	78db      	ldrb	r3, [r3, #3]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d10f      	bne.n	8005280 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052f4:	f023 0303 	bic.w	r3, r3, #3
 80052f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005308:	f023 0302 	bic.w	r3, r3, #2
 800530c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534a:	f043 0302 	orr.w	r3, r3, #2
 800534e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4013      	ands	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4013      	ands	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	0c1b      	lsrs	r3, r3, #16
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4013      	ands	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	b29b      	uxth	r3, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	4013      	ands	r3, r2
 8005418:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800541a:	68bb      	ldr	r3, [r7, #8]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
 8005458:	01db      	lsls	r3, r3, #7
 800545a:	b2db      	uxtb	r3, r3
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005476:	68bb      	ldr	r3, [r7, #8]
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0301 	and.w	r3, r3, #1
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054be:	f023 0307 	bic.w	r3, r3, #7
 80054c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	460b      	mov	r3, r1
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	333c      	adds	r3, #60	; 0x3c
 80054fe:	3304      	adds	r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4a26      	ldr	r2, [pc, #152]	; (80055a0 <USB_EP0_OutStart+0xb8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d90a      	bls.n	8005522 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551c:	d101      	bne.n	8005522 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e037      	b.n	8005592 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	461a      	mov	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005550:	f043 0318 	orr.w	r3, r3, #24
 8005554:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005564:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005568:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10f      	bne.n	8005590 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800558e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	4f54300a 	.word	0x4f54300a

080055a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3301      	adds	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <USB_CoreReset+0x60>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e01a      	b.n	80055f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	daf3      	bge.n	80055b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f043 0201 	orr.w	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3301      	adds	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <USB_CoreReset+0x60>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e006      	b.n	80055f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d0f1      	beq.n	80055d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	00030d40 	.word	0x00030d40

08005608 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005614:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005618:	f002 f8fc 	bl	8007814 <USBD_static_malloc>
 800561c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800562c:	2302      	movs	r3, #2
 800562e:	e066      	b.n	80056fe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	7c1b      	ldrb	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d119      	bne.n	8005674 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005644:	2202      	movs	r2, #2
 8005646:	2181      	movs	r1, #129	; 0x81
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 ffc0 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005658:	2202      	movs	r2, #2
 800565a:	2101      	movs	r1, #1
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 ffb6 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2210      	movs	r2, #16
 800566e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005672:	e016      	b.n	80056a2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	2202      	movs	r2, #2
 8005678:	2181      	movs	r1, #129	; 0x81
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 ffa7 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005686:	2340      	movs	r3, #64	; 0x40
 8005688:	2202      	movs	r2, #2
 800568a:	2101      	movs	r1, #1
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 ff9e 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2210      	movs	r2, #16
 800569e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056a2:	2308      	movs	r3, #8
 80056a4:	2203      	movs	r2, #3
 80056a6:	2182      	movs	r1, #130	; 0x82
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 ff90 	bl	80075ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7c1b      	ldrb	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e2:	2101      	movs	r1, #1
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f002 f861 	bl	80077ac <USBD_LL_PrepareReceive>
 80056ea:	e007      	b.n	80056fc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056f2:	2340      	movs	r3, #64	; 0x40
 80056f4:	2101      	movs	r1, #1
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f002 f858 	bl	80077ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005712:	2181      	movs	r1, #129	; 0x81
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 ff80 	bl	800761a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005720:	2101      	movs	r1, #1
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 ff79 	bl	800761a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005730:	2182      	movs	r1, #130	; 0x82
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 ff71 	bl	800761a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00e      	beq.n	8005770 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005762:	4618      	mov	r0, r3
 8005764:	f002 f864 	bl	8007830 <USBD_static_free>
    pdev->pClassData = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800578c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0af      	b.n	8005904 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d03f      	beq.n	8005830 <USBD_CDC_Setup+0xb4>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	f040 809f 	bne.w	80058f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	88db      	ldrh	r3, [r3, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02e      	beq.n	800581c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da16      	bge.n	80057f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80057d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	88d2      	ldrh	r2, [r2, #6]
 80057da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	88db      	ldrh	r3, [r3, #6]
 80057e0:	2b07      	cmp	r3, #7
 80057e2:	bf28      	it	cs
 80057e4:	2307      	movcs	r3, #7
 80057e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	89fa      	ldrh	r2, [r7, #14]
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 fae9 	bl	8006dc6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80057f4:	e085      	b.n	8005902 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	785a      	ldrb	r2, [r3, #1]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	88db      	ldrh	r3, [r3, #6]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800580c:	6939      	ldr	r1, [r7, #16]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	88db      	ldrh	r3, [r3, #6]
 8005812:	461a      	mov	r2, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 fb02 	bl	8006e1e <USBD_CtlPrepareRx>
      break;
 800581a:	e072      	b.n	8005902 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	7850      	ldrb	r0, [r2, #1]
 8005828:	2200      	movs	r2, #0
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	4798      	blx	r3
      break;
 800582e:	e068      	b.n	8005902 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b0b      	cmp	r3, #11
 8005836:	d852      	bhi.n	80058de <USBD_CDC_Setup+0x162>
 8005838:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <USBD_CDC_Setup+0xc4>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005871 	.word	0x08005871
 8005844:	080058ed 	.word	0x080058ed
 8005848:	080058df 	.word	0x080058df
 800584c:	080058df 	.word	0x080058df
 8005850:	080058df 	.word	0x080058df
 8005854:	080058df 	.word	0x080058df
 8005858:	080058df 	.word	0x080058df
 800585c:	080058df 	.word	0x080058df
 8005860:	080058df 	.word	0x080058df
 8005864:	080058df 	.word	0x080058df
 8005868:	0800589b 	.word	0x0800589b
 800586c:	080058c5 	.word	0x080058c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b03      	cmp	r3, #3
 800587a:	d107      	bne.n	800588c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800587c:	f107 030a 	add.w	r3, r7, #10
 8005880:	2202      	movs	r2, #2
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fa9e 	bl	8006dc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800588a:	e032      	b.n	80058f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fa28 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005894:	2303      	movs	r3, #3
 8005896:	75fb      	strb	r3, [r7, #23]
          break;
 8005898:	e02b      	b.n	80058f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d107      	bne.n	80058b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058a6:	f107 030d 	add.w	r3, r7, #13
 80058aa:	2201      	movs	r2, #1
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 fa89 	bl	8006dc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058b4:	e01d      	b.n	80058f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 fa13 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 80058be:	2303      	movs	r3, #3
 80058c0:	75fb      	strb	r3, [r7, #23]
          break;
 80058c2:	e016      	b.n	80058f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d00f      	beq.n	80058f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fa06 	bl	8006ce4 <USBD_CtlError>
            ret = USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058dc:	e008      	b.n	80058f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f9ff 	bl	8006ce4 <USBD_CtlError>
          ret = USBD_FAIL;
 80058e6:	2303      	movs	r3, #3
 80058e8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ea:	e002      	b.n	80058f2 <USBD_CDC_Setup+0x176>
          break;
 80058ec:	bf00      	nop
 80058ee:	e008      	b.n	8005902 <USBD_CDC_Setup+0x186>
          break;
 80058f0:	bf00      	nop
      }
      break;
 80058f2:	e006      	b.n	8005902 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 f9f4 	bl	8006ce4 <USBD_CtlError>
      ret = USBD_FAIL;
 80058fc:	2303      	movs	r3, #3
 80058fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005900:	bf00      	nop
  }

  return (uint8_t)ret;
 8005902:	7dfb      	ldrb	r3, [r7, #23]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800591e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800592a:	2303      	movs	r3, #3
 800592c:	e04f      	b.n	80059ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005934:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3318      	adds	r3, #24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d029      	beq.n	80059a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	3318      	adds	r3, #24
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	78f9      	ldrb	r1, [r7, #3]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	460b      	mov	r3, r1
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	1a5b      	subs	r3, r3, r1
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4403      	add	r3, r0
 800596c:	3344      	adds	r3, #68	; 0x44
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	fbb2 f1f3 	udiv	r1, r2, r3
 8005974:	fb03 f301 	mul.w	r3, r3, r1
 8005978:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800597a:	2b00      	cmp	r3, #0
 800597c:	d110      	bne.n	80059a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3318      	adds	r3, #24
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005992:	78f9      	ldrb	r1, [r7, #3]
 8005994:	2300      	movs	r3, #0
 8005996:	2200      	movs	r2, #0
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fee6 	bl	800776a <USBD_LL_Transmit>
 800599e:	e015      	b.n	80059cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e015      	b.n	8005a24 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 fef6 	bl	80077ee <USBD_LL_GetRxDataSize>
 8005a02:	4602      	mov	r2, r0
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e01b      	b.n	8005a7e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <USBD_CDC_EP0_RxReady+0x50>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	d010      	beq.n	8005a7c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a68:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a70:	b292      	uxth	r2, r2
 8005a72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	22ff      	movs	r2, #255	; 0xff
 8005a78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2243      	movs	r2, #67	; 0x43
 8005a94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a96:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	200000a4 	.word	0x200000a4

08005aa8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2243      	movs	r2, #67	; 0x43
 8005ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20000060 	.word	0x20000060

08005ac8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2243      	movs	r2, #67	; 0x43
 8005ad4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ad6:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	200000e8 	.word	0x200000e8

08005ae8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	220a      	movs	r2, #10
 8005af4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005af6:	4b03      	ldr	r3, [pc, #12]	; (8005b04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	2000001c 	.word	0x2000001c

08005b08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e004      	b.n	8005b26 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b44:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e008      	b.n	8005b62 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e004      	b.n	8005b94 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e016      	b.n	8005bec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	7c1b      	ldrb	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 fdea 	bl	80077ac <USBD_LL_PrepareReceive>
 8005bd8:	e007      	b.n	8005bea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	2101      	movs	r1, #1
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fde1 	bl	80077ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e01f      	b.n	8005c4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	79fa      	ldrb	r2, [r7, #7]
 8005c3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f001 fc5d 	bl	8007500 <USBD_LL_Init>
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e016      	b.n	8005c9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	f107 020e 	add.w	r2, r7, #14
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	4602      	mov	r2, r0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fc74 	bl	8007598 <USBD_LL_Start>
 8005cb0:	4603      	mov	r3, r0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
  }

  return USBD_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 ff90 	bl	8006c70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d01a      	beq.n	8005daa <USBD_LL_SetupStage+0x72>
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d822      	bhi.n	8005dbe <USBD_LL_SetupStage+0x86>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <USBD_LL_SetupStage+0x4a>
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d00a      	beq.n	8005d96 <USBD_LL_SetupStage+0x5e>
 8005d80:	e01d      	b.n	8005dbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa62 	bl	8006254 <USBD_StdDevReq>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	e020      	b.n	8005dd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fac6 	bl	8006330 <USBD_StdItfReq>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
      break;
 8005da8:	e016      	b.n	8005dd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fb05 	bl	80063c2 <USBD_StdEPReq>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
      break;
 8005dbc:	e00c      	b.n	8005dd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 fc43 	bl	8007658 <USBD_LL_StallEP>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd6:	bf00      	nop
  }

  return ret;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	460b      	mov	r3, r1
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d138      	bne.n	8005e68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005dfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d14a      	bne.n	8005e9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d913      	bls.n	8005e3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	1ad2      	subs	r2, r2, r3
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	bf28      	it	cs
 8005e2e:	4613      	movcs	r3, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 f80f 	bl	8006e58 <USBD_CtlContinueRx>
 8005e3a:	e030      	b.n	8005e9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d10b      	bne.n	8005e60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f001 f80a 	bl	8006e7a <USBD_CtlSendStatus>
 8005e66:	e01a      	b.n	8005e9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d114      	bne.n	8005e9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00e      	beq.n	8005e9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	7afa      	ldrb	r2, [r7, #11]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	4798      	blx	r3
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	e000      	b.n	8005ea0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d16b      	bne.n	8005f94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d156      	bne.n	8005f7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d914      	bls.n	8005f02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	1ad2      	subs	r2, r2, r3
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	461a      	mov	r2, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 ff84 	bl	8006dfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2100      	movs	r1, #0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f001 fc56 	bl	80077ac <USBD_LL_PrepareReceive>
 8005f00:	e03b      	b.n	8005f7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d11c      	bne.n	8005f48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d316      	bcc.n	8005f48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d20f      	bcs.n	8005f48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 ff65 	bl	8006dfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2100      	movs	r1, #0
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f001 fc33 	bl	80077ac <USBD_LL_PrepareReceive>
 8005f46:	e018      	b.n	8005f7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d10b      	bne.n	8005f6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f001 fb72 	bl	8007658 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 ff93 	bl	8006ea0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d122      	bne.n	8005fca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fe98 	bl	8005cba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f92:	e01a      	b.n	8005fca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d114      	bne.n	8005fca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00e      	beq.n	8005fca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	7afa      	ldrb	r2, [r7, #11]
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	4798      	blx	r3
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	e000      	b.n	8005fcc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006004:	2303      	movs	r3, #3
 8006006:	e02f      	b.n	8006068 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00f      	beq.n	8006032 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d009      	beq.n	8006032 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	4611      	mov	r1, r2
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006032:	2340      	movs	r3, #64	; 0x40
 8006034:	2200      	movs	r2, #0
 8006036:	2100      	movs	r1, #0
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fac8 	bl	80075ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2240      	movs	r2, #64	; 0x40
 800604a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800604e:	2340      	movs	r3, #64	; 0x40
 8006050:	2200      	movs	r2, #0
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 faba 	bl	80075ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2240      	movs	r2, #64	; 0x40
 8006064:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d106      	bne.n	80060de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80060fe:	2303      	movs	r3, #3
 8006100:	e012      	b.n	8006128 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b03      	cmp	r3, #3
 800610c:	d10b      	bne.n	8006126 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006146:	2303      	movs	r3, #3
 8006148:	e014      	b.n	8006174 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d10d      	bne.n	8006172 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	4611      	mov	r1, r2
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006192:	2303      	movs	r3, #3
 8006194:	e014      	b.n	80061c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d10d      	bne.n	80061be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	4611      	mov	r1, r2
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6852      	ldr	r2, [r2, #4]
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	4611      	mov	r1, r2
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
  }

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	3301      	adds	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006234:	8a3b      	ldrh	r3, [r7, #16]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	b21a      	sxth	r2, r3
 800623a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800623e:	4313      	orrs	r3, r2
 8006240:	b21b      	sxth	r3, r3
 8006242:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006244:	89fb      	ldrh	r3, [r7, #14]
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d005      	beq.n	800627a <USBD_StdDevReq+0x26>
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d853      	bhi.n	800631a <USBD_StdDevReq+0xc6>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <USBD_StdDevReq+0x3a>
 8006276:	2b20      	cmp	r3, #32
 8006278:	d14f      	bne.n	800631a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e04a      	b.n	8006324 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b09      	cmp	r3, #9
 8006294:	d83b      	bhi.n	800630e <USBD_StdDevReq+0xba>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <USBD_StdDevReq+0x48>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	08006305 	.word	0x08006305
 80062a4:	0800630f 	.word	0x0800630f
 80062a8:	080062fb 	.word	0x080062fb
 80062ac:	0800630f 	.word	0x0800630f
 80062b0:	080062cf 	.word	0x080062cf
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	0800630f 	.word	0x0800630f
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	080062d9 	.word	0x080062d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9de 	bl	8006688 <USBD_GetDescriptor>
          break;
 80062cc:	e024      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb43 	bl	800695c <USBD_SetAddress>
          break;
 80062d6:	e01f      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fb82 	bl	80069e4 <USBD_SetConfig>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
          break;
 80062e4:	e018      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc21 	bl	8006b30 <USBD_GetConfig>
          break;
 80062ee:	e013      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fc52 	bl	8006b9c <USBD_GetStatus>
          break;
 80062f8:	e00e      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc81 	bl	8006c04 <USBD_SetFeature>
          break;
 8006302:	e009      	b.n	8006318 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc90 	bl	8006c2c <USBD_ClrFeature>
          break;
 800630c:	e004      	b.n	8006318 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fce7 	bl	8006ce4 <USBD_CtlError>
          break;
 8006316:	bf00      	nop
      }
      break;
 8006318:	e004      	b.n	8006324 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fce1 	bl	8006ce4 <USBD_CtlError>
      break;
 8006322:	bf00      	nop
  }

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop

08006330 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d005      	beq.n	8006356 <USBD_StdItfReq+0x26>
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d82f      	bhi.n	80063ae <USBD_StdItfReq+0x7e>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <USBD_StdItfReq+0x26>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d12b      	bne.n	80063ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635c:	b2db      	uxtb	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	2b02      	cmp	r3, #2
 8006362:	d81d      	bhi.n	80063a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	889b      	ldrh	r3, [r3, #4]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d813      	bhi.n	8006396 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	88db      	ldrh	r3, [r3, #6]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d110      	bne.n	80063aa <USBD_StdItfReq+0x7a>
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10d      	bne.n	80063aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fd73 	bl	8006e7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006394:	e009      	b.n	80063aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fca3 	bl	8006ce4 <USBD_CtlError>
          break;
 800639e:	e004      	b.n	80063aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc9e 	bl	8006ce4 <USBD_CtlError>
          break;
 80063a8:	e000      	b.n	80063ac <USBD_StdItfReq+0x7c>
          break;
 80063aa:	bf00      	nop
      }
      break;
 80063ac:	e004      	b.n	80063b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc97 	bl	8006ce4 <USBD_CtlError>
      break;
 80063b6:	bf00      	nop
  }

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	889b      	ldrh	r3, [r3, #4]
 80063d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d007      	beq.n	80063f2 <USBD_StdEPReq+0x30>
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	f200 8145 	bhi.w	8006672 <USBD_StdEPReq+0x2b0>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <USBD_StdEPReq+0x44>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	f040 8140 	bne.w	8006672 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
      break;
 8006404:	e13a      	b.n	800667c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b03      	cmp	r3, #3
 800640c:	d007      	beq.n	800641e <USBD_StdEPReq+0x5c>
 800640e:	2b03      	cmp	r3, #3
 8006410:	f300 8129 	bgt.w	8006666 <USBD_StdEPReq+0x2a4>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d07f      	beq.n	8006518 <USBD_StdEPReq+0x156>
 8006418:	2b01      	cmp	r3, #1
 800641a:	d03c      	beq.n	8006496 <USBD_StdEPReq+0xd4>
 800641c:	e123      	b.n	8006666 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d002      	beq.n	8006430 <USBD_StdEPReq+0x6e>
 800642a:	2b03      	cmp	r3, #3
 800642c:	d016      	beq.n	800645c <USBD_StdEPReq+0x9a>
 800642e:	e02c      	b.n	800648a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <USBD_StdEPReq+0x90>
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	2b80      	cmp	r3, #128	; 0x80
 800643a:	d00a      	beq.n	8006452 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f909 	bl	8007658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006446:	2180      	movs	r1, #128	; 0x80
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 f905 	bl	8007658 <USBD_LL_StallEP>
 800644e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006450:	e020      	b.n	8006494 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fc45 	bl	8006ce4 <USBD_CtlError>
              break;
 800645a:	e01b      	b.n	8006494 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10e      	bne.n	8006482 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <USBD_StdEPReq+0xc0>
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d008      	beq.n	8006482 <USBD_StdEPReq+0xc0>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	88db      	ldrh	r3, [r3, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 f8eb 	bl	8007658 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fcf9 	bl	8006e7a <USBD_CtlSendStatus>

              break;
 8006488:	e004      	b.n	8006494 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fc29 	bl	8006ce4 <USBD_CtlError>
              break;
 8006492:	bf00      	nop
          }
          break;
 8006494:	e0ec      	b.n	8006670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d002      	beq.n	80064a8 <USBD_StdEPReq+0xe6>
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d016      	beq.n	80064d4 <USBD_StdEPReq+0x112>
 80064a6:	e030      	b.n	800650a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <USBD_StdEPReq+0x108>
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d00a      	beq.n	80064ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 f8cd 	bl	8007658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f8c9 	bl	8007658 <USBD_LL_StallEP>
 80064c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064c8:	e025      	b.n	8006516 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fc09 	bl	8006ce4 <USBD_CtlError>
              break;
 80064d2:	e020      	b.n	8006516 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	885b      	ldrh	r3, [r3, #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11b      	bne.n	8006514 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 f8d3 	bl	8007696 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcc2 	bl	8006e7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006508:	e004      	b.n	8006514 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fbe9 	bl	8006ce4 <USBD_CtlError>
              break;
 8006512:	e000      	b.n	8006516 <USBD_StdEPReq+0x154>
              break;
 8006514:	bf00      	nop
          }
          break;
 8006516:	e0ab      	b.n	8006670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d002      	beq.n	800652a <USBD_StdEPReq+0x168>
 8006524:	2b03      	cmp	r3, #3
 8006526:	d032      	beq.n	800658e <USBD_StdEPReq+0x1cc>
 8006528:	e097      	b.n	800665a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <USBD_StdEPReq+0x17e>
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b80      	cmp	r3, #128	; 0x80
 8006534:	d004      	beq.n	8006540 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fbd3 	bl	8006ce4 <USBD_CtlError>
                break;
 800653e:	e091      	b.n	8006664 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	da0b      	bge.n	8006560 <USBD_StdEPReq+0x19e>
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	3310      	adds	r3, #16
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	3304      	adds	r3, #4
 800655e:	e00b      	b.n	8006578 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2202      	movs	r2, #2
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fc1d 	bl	8006dc6 <USBD_CtlSendData>
              break;
 800658c:	e06a      	b.n	8006664 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800658e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da11      	bge.n	80065ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3324      	adds	r3, #36	; 0x24
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d117      	bne.n	80065e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fb96 	bl	8006ce4 <USBD_CtlError>
                  break;
 80065b8:	e054      	b.n	8006664 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fb83 	bl	8006ce4 <USBD_CtlError>
                  break;
 80065de:	e041      	b.n	8006664 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da0b      	bge.n	8006600 <USBD_StdEPReq+0x23e>
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	3310      	adds	r3, #16
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	3304      	adds	r3, #4
 80065fe:	e00b      	b.n	8006618 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4413      	add	r3, r2
 8006616:	3304      	adds	r3, #4
 8006618:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <USBD_StdEPReq+0x264>
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d103      	bne.n	800662e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e00e      	b.n	800664c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 f84e 	bl	80076d4 <USBD_LL_IsStallEP>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e002      	b.n	800664c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2202      	movs	r2, #2
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fbb7 	bl	8006dc6 <USBD_CtlSendData>
              break;
 8006658:	e004      	b.n	8006664 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fb41 	bl	8006ce4 <USBD_CtlError>
              break;
 8006662:	bf00      	nop
          }
          break;
 8006664:	e004      	b.n	8006670 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb3b 	bl	8006ce4 <USBD_CtlError>
          break;
 800666e:	bf00      	nop
      }
      break;
 8006670:	e004      	b.n	800667c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fb35 	bl	8006ce4 <USBD_CtlError>
      break;
 800667a:	bf00      	nop
  }

  return ret;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	885b      	ldrh	r3, [r3, #2]
 80066a2:	0a1b      	lsrs	r3, r3, #8
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	2b06      	cmp	r3, #6
 80066aa:	f200 8128 	bhi.w	80068fe <USBD_GetDescriptor+0x276>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <USBD_GetDescriptor+0x2c>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	080066e9 	.word	0x080066e9
 80066bc:	08006729 	.word	0x08006729
 80066c0:	080068ff 	.word	0x080068ff
 80066c4:	080068ff 	.word	0x080068ff
 80066c8:	0800689f 	.word	0x0800689f
 80066cc:	080068cb 	.word	0x080068cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
      break;
 80066e6:	e112      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7c1b      	ldrb	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10d      	bne.n	800670c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	f107 0208 	add.w	r2, r7, #8
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3301      	adds	r3, #1
 8006706:	2202      	movs	r2, #2
 8006708:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800670a:	e100      	b.n	800690e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	f107 0208 	add.w	r2, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	2202      	movs	r2, #2
 8006724:	701a      	strb	r2, [r3, #0]
      break;
 8006726:	e0f2      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	885b      	ldrh	r3, [r3, #2]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b05      	cmp	r3, #5
 8006730:	f200 80ac 	bhi.w	800688c <USBD_GetDescriptor+0x204>
 8006734:	a201      	add	r2, pc, #4	; (adr r2, 800673c <USBD_GetDescriptor+0xb4>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006755 	.word	0x08006755
 8006740:	08006789 	.word	0x08006789
 8006744:	080067bd 	.word	0x080067bd
 8006748:	080067f1 	.word	0x080067f1
 800674c:	08006825 	.word	0x08006825
 8006750:	08006859 	.word	0x08006859
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006776:	e091      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fab2 	bl	8006ce4 <USBD_CtlError>
            err++;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	3301      	adds	r3, #1
 8006784:	72fb      	strb	r3, [r7, #11]
          break;
 8006786:	e089      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	7c12      	ldrb	r2, [r2, #16]
 80067a0:	f107 0108 	add.w	r1, r7, #8
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
 80067a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067aa:	e077      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa98 	bl	8006ce4 <USBD_CtlError>
            err++;
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	3301      	adds	r3, #1
 80067b8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ba:	e06f      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	7c12      	ldrb	r2, [r2, #16]
 80067d4:	f107 0108 	add.w	r1, r7, #8
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
 80067dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067de:	e05d      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa7e 	bl	8006ce4 <USBD_CtlError>
            err++;
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	3301      	adds	r3, #1
 80067ec:	72fb      	strb	r3, [r7, #11]
          break;
 80067ee:	e055      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00b      	beq.n	8006814 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	7c12      	ldrb	r2, [r2, #16]
 8006808:	f107 0108 	add.w	r1, r7, #8
 800680c:	4610      	mov	r0, r2
 800680e:	4798      	blx	r3
 8006810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006812:	e043      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa64 	bl	8006ce4 <USBD_CtlError>
            err++;
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	3301      	adds	r3, #1
 8006820:	72fb      	strb	r3, [r7, #11]
          break;
 8006822:	e03b      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	7c12      	ldrb	r2, [r2, #16]
 800683c:	f107 0108 	add.w	r1, r7, #8
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
 8006844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006846:	e029      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa4a 	bl	8006ce4 <USBD_CtlError>
            err++;
 8006850:	7afb      	ldrb	r3, [r7, #11]
 8006852:	3301      	adds	r3, #1
 8006854:	72fb      	strb	r3, [r7, #11]
          break;
 8006856:	e021      	b.n	800689c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	7c12      	ldrb	r2, [r2, #16]
 8006870:	f107 0108 	add.w	r1, r7, #8
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800687a:	e00f      	b.n	800689c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa30 	bl	8006ce4 <USBD_CtlError>
            err++;
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	3301      	adds	r3, #1
 8006888:	72fb      	strb	r3, [r7, #11]
          break;
 800688a:	e007      	b.n	800689c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa28 	bl	8006ce4 <USBD_CtlError>
          err++;
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	3301      	adds	r3, #1
 8006898:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800689a:	bf00      	nop
      }
      break;
 800689c:	e037      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7c1b      	ldrb	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	f107 0208 	add.w	r2, r7, #8
 80068b2:	4610      	mov	r0, r2
 80068b4:	4798      	blx	r3
 80068b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068b8:	e029      	b.n	800690e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa11 	bl	8006ce4 <USBD_CtlError>
        err++;
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	3301      	adds	r3, #1
 80068c6:	72fb      	strb	r3, [r7, #11]
      break;
 80068c8:	e021      	b.n	800690e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7c1b      	ldrb	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10d      	bne.n	80068ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	f107 0208 	add.w	r2, r7, #8
 80068de:	4610      	mov	r0, r2
 80068e0:	4798      	blx	r3
 80068e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	2207      	movs	r2, #7
 80068ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ec:	e00f      	b.n	800690e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9f7 	bl	8006ce4 <USBD_CtlError>
        err++;
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	3301      	adds	r3, #1
 80068fa:	72fb      	strb	r3, [r7, #11]
      break;
 80068fc:	e007      	b.n	800690e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f9ef 	bl	8006ce4 <USBD_CtlError>
      err++;
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	3301      	adds	r3, #1
 800690a:	72fb      	strb	r3, [r7, #11]
      break;
 800690c:	bf00      	nop
  }

  if (err != 0U)
 800690e:	7afb      	ldrb	r3, [r7, #11]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d11e      	bne.n	8006952 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	88db      	ldrh	r3, [r3, #6]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d016      	beq.n	800694a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800691c:	893b      	ldrh	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00e      	beq.n	8006940 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88da      	ldrh	r2, [r3, #6]
 8006926:	893b      	ldrh	r3, [r7, #8]
 8006928:	4293      	cmp	r3, r2
 800692a:	bf28      	it	cs
 800692c:	4613      	movcs	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006932:	893b      	ldrh	r3, [r7, #8]
 8006934:	461a      	mov	r2, r3
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa44 	bl	8006dc6 <USBD_CtlSendData>
 800693e:	e009      	b.n	8006954 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9ce 	bl	8006ce4 <USBD_CtlError>
 8006948:	e004      	b.n	8006954 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa95 	bl	8006e7a <USBD_CtlSendStatus>
 8006950:	e000      	b.n	8006954 <USBD_GetDescriptor+0x2cc>
    return;
 8006952:	bf00      	nop
  }
}
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop

0800695c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	889b      	ldrh	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d131      	bne.n	80069d2 <USBD_SetAddress+0x76>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	88db      	ldrh	r3, [r3, #6]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d12d      	bne.n	80069d2 <USBD_SetAddress+0x76>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	885b      	ldrh	r3, [r3, #2]
 800697a:	2b7f      	cmp	r3, #127	; 0x7f
 800697c:	d829      	bhi.n	80069d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006988:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b03      	cmp	r3, #3
 8006994:	d104      	bne.n	80069a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9a3 	bl	8006ce4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699e:	e01d      	b.n	80069dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	7bfa      	ldrb	r2, [r7, #15]
 80069a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 febd 	bl	800772c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa61 	bl	8006e7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c6:	e009      	b.n	80069dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	e004      	b.n	80069dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f985 	bl	8006ce4 <USBD_CtlError>
  }
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	885b      	ldrh	r3, [r3, #2]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	4b4c      	ldr	r3, [pc, #304]	; (8006b2c <USBD_SetConfig+0x148>)
 80069fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069fc:	4b4b      	ldr	r3, [pc, #300]	; (8006b2c <USBD_SetConfig+0x148>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d905      	bls.n	8006a10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f96c 	bl	8006ce4 <USBD_CtlError>
    return USBD_FAIL;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e088      	b.n	8006b22 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d002      	beq.n	8006a22 <USBD_SetConfig+0x3e>
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d025      	beq.n	8006a6c <USBD_SetConfig+0x88>
 8006a20:	e071      	b.n	8006b06 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a22:	4b42      	ldr	r3, [pc, #264]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01c      	beq.n	8006a64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006a2a:	4b40      	ldr	r3, [pc, #256]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a34:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff f948 	bl	8005cd0 <USBD_SetClassConfig>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f949 	bl	8006ce4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a52:	e065      	b.n	8006b20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa10 	bl	8006e7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a62:	e05d      	b.n	8006b20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa08 	bl	8006e7a <USBD_CtlSendStatus>
      break;
 8006a6a:	e059      	b.n	8006b20 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a6c:	4b2f      	ldr	r3, [pc, #188]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d112      	bne.n	8006a9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a7c:	4b2b      	ldr	r3, [pc, #172]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a86:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff f93b 	bl	8005d08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f9f1 	bl	8006e7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a98:	e042      	b.n	8006b20 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <USBD_SetConfig+0x148>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d02a      	beq.n	8006afe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff f929 	bl	8005d08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <USBD_SetConfig+0x148>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <USBD_SetConfig+0x148>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff f902 	bl	8005cd0 <USBD_SetClassConfig>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f903 	bl	8006ce4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff f90e 	bl	8005d08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006af4:	e014      	b.n	8006b20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9bf 	bl	8006e7a <USBD_CtlSendStatus>
      break;
 8006afc:	e010      	b.n	8006b20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9bb 	bl	8006e7a <USBD_CtlSendStatus>
      break;
 8006b04:	e00c      	b.n	8006b20 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f8eb 	bl	8006ce4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <USBD_SetConfig+0x148>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff f8f7 	bl	8005d08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1e:	bf00      	nop
  }

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200001b8 	.word	0x200001b8

08006b30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	88db      	ldrh	r3, [r3, #6]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d004      	beq.n	8006b4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f8cd 	bl	8006ce4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b4a:	e023      	b.n	8006b94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	dc02      	bgt.n	8006b5e <USBD_GetConfig+0x2e>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	dc03      	bgt.n	8006b64 <USBD_GetConfig+0x34>
 8006b5c:	e015      	b.n	8006b8a <USBD_GetConfig+0x5a>
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d00b      	beq.n	8006b7a <USBD_GetConfig+0x4a>
 8006b62:	e012      	b.n	8006b8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f927 	bl	8006dc6 <USBD_CtlSendData>
        break;
 8006b78:	e00c      	b.n	8006b94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f91f 	bl	8006dc6 <USBD_CtlSendData>
        break;
 8006b88:	e004      	b.n	8006b94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f8a9 	bl	8006ce4 <USBD_CtlError>
        break;
 8006b92:	bf00      	nop
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d81e      	bhi.n	8006bf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	88db      	ldrh	r3, [r3, #6]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d004      	beq.n	8006bc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f890 	bl	8006ce4 <USBD_CtlError>
        break;
 8006bc4:	e01a      	b.n	8006bfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f043 0202 	orr.w	r2, r3, #2
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	330c      	adds	r3, #12
 8006be6:	2202      	movs	r2, #2
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8eb 	bl	8006dc6 <USBD_CtlSendData>
      break;
 8006bf0:	e004      	b.n	8006bfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f875 	bl	8006ce4 <USBD_CtlError>
      break;
 8006bfa:	bf00      	nop
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	885b      	ldrh	r3, [r3, #2]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d106      	bne.n	8006c24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f92b 	bl	8006e7a <USBD_CtlSendStatus>
  }
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d80b      	bhi.n	8006c5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	885b      	ldrh	r3, [r3, #2]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d10c      	bne.n	8006c66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f910 	bl	8006e7a <USBD_CtlSendStatus>
      }
      break;
 8006c5a:	e004      	b.n	8006c66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f840 	bl	8006ce4 <USBD_CtlError>
      break;
 8006c64:	e000      	b.n	8006c68 <USBD_ClrFeature+0x3c>
      break;
 8006c66:	bf00      	nop
  }
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff fabb 	bl	8006216 <SWAPBYTE>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff faae 	bl	8006216 <SWAPBYTE>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff faa1 	bl	8006216 <SWAPBYTE>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	80da      	strh	r2, [r3, #6]
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fcb1 	bl	8007658 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fcad 	bl	8007658 <USBD_LL_StallEP>
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d036      	beq.n	8006d8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d20:	6938      	ldr	r0, [r7, #16]
 8006d22:	f000 f836 	bl	8006d92 <USBD_GetLen>
 8006d26:	4603      	mov	r3, r0
 8006d28:	3301      	adds	r3, #1
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	3301      	adds	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	3301      	adds	r3, #1
 8006d54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d56:	e013      	b.n	8006d80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	3301      	adds	r3, #1
 8006d68:	613b      	str	r3, [r7, #16]
    idx++;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	4413      	add	r3, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e7      	bne.n	8006d58 <USBD_GetString+0x52>
 8006d88:	e000      	b.n	8006d8c <USBD_GetString+0x86>
    return;
 8006d8a:	bf00      	nop
  }
}
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006da2:	e005      	b.n	8006db0 <USBD_GetLen+0x1e>
  {
    len++;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	3301      	adds	r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	3301      	adds	r3, #1
 8006dae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f5      	bne.n	8006da4 <USBD_GetLen+0x12>
  }

  return len;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	2100      	movs	r1, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fcbc 	bl	800776a <USBD_LL_Transmit>

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fcab 	bl	800776a <USBD_LL_Transmit>

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fcaf 	bl	80077ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	2100      	movs	r1, #0
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 fc9e 	bl	80077ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2204      	movs	r2, #4
 8006e86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fc6a 	bl	800776a <USBD_LL_Transmit>

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2205      	movs	r2, #5
 8006eac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc78 	bl	80077ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4912      	ldr	r1, [pc, #72]	; (8006f18 <MX_USB_DEVICE_Init+0x50>)
 8006ed0:	4812      	ldr	r0, [pc, #72]	; (8006f1c <MX_USB_DEVICE_Init+0x54>)
 8006ed2:	f7fe fe8f 	bl	8005bf4 <USBD_Init>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006edc:	f7f9 fbe2 	bl	80006a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ee0:	490f      	ldr	r1, [pc, #60]	; (8006f20 <MX_USB_DEVICE_Init+0x58>)
 8006ee2:	480e      	ldr	r0, [pc, #56]	; (8006f1c <MX_USB_DEVICE_Init+0x54>)
 8006ee4:	f7fe feb6 	bl	8005c54 <USBD_RegisterClass>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006eee:	f7f9 fbd9 	bl	80006a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ef2:	490c      	ldr	r1, [pc, #48]	; (8006f24 <MX_USB_DEVICE_Init+0x5c>)
 8006ef4:	4809      	ldr	r0, [pc, #36]	; (8006f1c <MX_USB_DEVICE_Init+0x54>)
 8006ef6:	f7fe fe07 	bl	8005b08 <USBD_CDC_RegisterInterface>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f00:	f7f9 fbd0 	bl	80006a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f04:	4805      	ldr	r0, [pc, #20]	; (8006f1c <MX_USB_DEVICE_Init+0x54>)
 8006f06:	f7fe fecc 	bl	8005ca2 <USBD_Start>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f10:	f7f9 fbc8 	bl	80006a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f14:	bf00      	nop
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000140 	.word	0x20000140
 8006f1c:	20000620 	.word	0x20000620
 8006f20:	20000028 	.word	0x20000028
 8006f24:	2000012c 	.word	0x2000012c

08006f28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4905      	ldr	r1, [pc, #20]	; (8006f44 <CDC_Init_FS+0x1c>)
 8006f30:	4805      	ldr	r0, [pc, #20]	; (8006f48 <CDC_Init_FS+0x20>)
 8006f32:	f7fe fdfe 	bl	8005b32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f36:	4905      	ldr	r1, [pc, #20]	; (8006f4c <CDC_Init_FS+0x24>)
 8006f38:	4803      	ldr	r0, [pc, #12]	; (8006f48 <CDC_Init_FS+0x20>)
 8006f3a:	f7fe fe18 	bl	8005b6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000cd8 	.word	0x20000cd8
 8006f48:	20000620 	.word	0x20000620
 8006f4c:	200008f0 	.word	0x200008f0

08006f50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	6039      	str	r1, [r7, #0]
 8006f6a:	71fb      	strb	r3, [r7, #7]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b23      	cmp	r3, #35	; 0x23
 8006f74:	d84a      	bhi.n	800700c <CDC_Control_FS+0xac>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <CDC_Control_FS+0x1c>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	0800700d 	.word	0x0800700d
 8006f80:	0800700d 	.word	0x0800700d
 8006f84:	0800700d 	.word	0x0800700d
 8006f88:	0800700d 	.word	0x0800700d
 8006f8c:	0800700d 	.word	0x0800700d
 8006f90:	0800700d 	.word	0x0800700d
 8006f94:	0800700d 	.word	0x0800700d
 8006f98:	0800700d 	.word	0x0800700d
 8006f9c:	0800700d 	.word	0x0800700d
 8006fa0:	0800700d 	.word	0x0800700d
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	0800700d 	.word	0x0800700d
 8006fb0:	0800700d 	.word	0x0800700d
 8006fb4:	0800700d 	.word	0x0800700d
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	0800700d 	.word	0x0800700d
 8006fc0:	0800700d 	.word	0x0800700d
 8006fc4:	0800700d 	.word	0x0800700d
 8006fc8:	0800700d 	.word	0x0800700d
 8006fcc:	0800700d 	.word	0x0800700d
 8006fd0:	0800700d 	.word	0x0800700d
 8006fd4:	0800700d 	.word	0x0800700d
 8006fd8:	0800700d 	.word	0x0800700d
 8006fdc:	0800700d 	.word	0x0800700d
 8006fe0:	0800700d 	.word	0x0800700d
 8006fe4:	0800700d 	.word	0x0800700d
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	0800700d 	.word	0x0800700d
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	0800700d 	.word	0x0800700d
 8006ff8:	0800700d 	.word	0x0800700d
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	0800700d 	.word	0x0800700d
 8007004:	0800700d 	.word	0x0800700d
 8007008:	0800700d 	.word	0x0800700d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800700c:	bf00      	nop
  }

  return (USBD_OK);
 800700e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4805      	ldr	r0, [pc, #20]	; (8007040 <CDC_Receive_FS+0x24>)
 800702a:	f7fe fda0 	bl	8005b6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800702e:	4804      	ldr	r0, [pc, #16]	; (8007040 <CDC_Receive_FS+0x24>)
 8007030:	f7fe fdb6 	bl	8005ba0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007034:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000620 	.word	0x20000620

08007044 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800705a:	4618      	mov	r0, r3
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2212      	movs	r2, #18
 8007078:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800707a:	4b03      	ldr	r3, [pc, #12]	; (8007088 <USBD_FS_DeviceDescriptor+0x20>)
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	2000015c 	.word	0x2000015c

0800708c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	6039      	str	r1, [r7, #0]
 8007096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2204      	movs	r2, #4
 800709c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000170 	.word	0x20000170

080070b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	6039      	str	r1, [r7, #0]
 80070ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	4907      	ldr	r1, [pc, #28]	; (80070e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80070c6:	4808      	ldr	r0, [pc, #32]	; (80070e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80070c8:	f7ff fe1d 	bl	8006d06 <USBD_GetString>
 80070cc:	e004      	b.n	80070d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4904      	ldr	r1, [pc, #16]	; (80070e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80070d2:	4805      	ldr	r0, [pc, #20]	; (80070e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80070d4:	f7ff fe17 	bl	8006d06 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	200010c0 	.word	0x200010c0
 80070e8:	0800790c 	.word	0x0800790c

080070ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	4904      	ldr	r1, [pc, #16]	; (800710c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070fc:	4804      	ldr	r0, [pc, #16]	; (8007110 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070fe:	f7ff fe02 	bl	8006d06 <USBD_GetString>
  return USBD_StrDesc;
 8007102:	4b02      	ldr	r3, [pc, #8]	; (800710c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200010c0 	.word	0x200010c0
 8007110:	08007920 	.word	0x08007920

08007114 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	221a      	movs	r2, #26
 8007124:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007126:	f000 f843 	bl	80071b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800712a:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000174 	.word	0x20000174

08007138 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	6039      	str	r1, [r7, #0]
 8007142:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d105      	bne.n	8007156 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	4907      	ldr	r1, [pc, #28]	; (800716c <USBD_FS_ConfigStrDescriptor+0x34>)
 800714e:	4808      	ldr	r0, [pc, #32]	; (8007170 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007150:	f7ff fdd9 	bl	8006d06 <USBD_GetString>
 8007154:	e004      	b.n	8007160 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	4904      	ldr	r1, [pc, #16]	; (800716c <USBD_FS_ConfigStrDescriptor+0x34>)
 800715a:	4805      	ldr	r0, [pc, #20]	; (8007170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800715c:	f7ff fdd3 	bl	8006d06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200010c0 	.word	0x200010c0
 8007170:	08007934 	.word	0x08007934

08007174 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	4907      	ldr	r1, [pc, #28]	; (80071a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800718a:	4808      	ldr	r0, [pc, #32]	; (80071ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800718c:	f7ff fdbb 	bl	8006d06 <USBD_GetString>
 8007190:	e004      	b.n	800719c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	4904      	ldr	r1, [pc, #16]	; (80071a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007196:	4805      	ldr	r0, [pc, #20]	; (80071ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007198:	f7ff fdb5 	bl	8006d06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800719c:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	200010c0 	.word	0x200010c0
 80071ac:	08007940 	.word	0x08007940

080071b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <Get_SerialNum+0x44>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071bc:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <Get_SerialNum+0x48>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071c2:	4b0e      	ldr	r3, [pc, #56]	; (80071fc <Get_SerialNum+0x4c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071d6:	2208      	movs	r2, #8
 80071d8:	4909      	ldr	r1, [pc, #36]	; (8007200 <Get_SerialNum+0x50>)
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f814 	bl	8007208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071e0:	2204      	movs	r2, #4
 80071e2:	4908      	ldr	r1, [pc, #32]	; (8007204 <Get_SerialNum+0x54>)
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f000 f80f 	bl	8007208 <IntToUnicode>
  }
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	1fff7a10 	.word	0x1fff7a10
 80071f8:	1fff7a14 	.word	0x1fff7a14
 80071fc:	1fff7a18 	.word	0x1fff7a18
 8007200:	20000176 	.word	0x20000176
 8007204:	20000186 	.word	0x20000186

08007208 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
 800721e:	e027      	b.n	8007270 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0f1b      	lsrs	r3, r3, #28
 8007224:	2b09      	cmp	r3, #9
 8007226:	d80b      	bhi.n	8007240 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	0f1b      	lsrs	r3, r3, #28
 800722c:	b2da      	uxtb	r2, r3
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	4619      	mov	r1, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	440b      	add	r3, r1
 8007238:	3230      	adds	r2, #48	; 0x30
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e00a      	b.n	8007256 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0f1b      	lsrs	r3, r3, #28
 8007244:	b2da      	uxtb	r2, r3
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4619      	mov	r1, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	440b      	add	r3, r1
 8007250:	3237      	adds	r2, #55	; 0x37
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	3301      	adds	r3, #1
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	2200      	movs	r2, #0
 8007268:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	3301      	adds	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
 8007270:	7dfa      	ldrb	r2, [r7, #23]
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	429a      	cmp	r2, r3
 8007276:	d3d3      	bcc.n	8007220 <IntToUnicode+0x18>
  }
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	; 0x28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	609a      	str	r2, [r3, #8]
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a8:	d13a      	bne.n	8007320 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	4a1d      	ldr	r2, [pc, #116]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	6313      	str	r3, [r2, #48]	; 0x30
 80072ba:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 80072bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80072ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072cc:	2302      	movs	r3, #2
 80072ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d4:	2303      	movs	r3, #3
 80072d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072d8:	230a      	movs	r3, #10
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072dc:	f107 0314 	add.w	r3, r7, #20
 80072e0:	4619      	mov	r1, r3
 80072e2:	4812      	ldr	r0, [pc, #72]	; (800732c <HAL_PCD_MspInit+0xa4>)
 80072e4:	f7f9 fe66 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072e8:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	4a0e      	ldr	r2, [pc, #56]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 80072ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f2:	6353      	str	r3, [r2, #52]	; 0x34
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	4a0a      	ldr	r2, [pc, #40]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 80072fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007302:	6453      	str	r3, [r2, #68]	; 0x44
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <HAL_PCD_MspInit+0xa0>)
 8007306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007310:	2200      	movs	r2, #0
 8007312:	2100      	movs	r1, #0
 8007314:	2043      	movs	r0, #67	; 0x43
 8007316:	f7f9 fd84 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800731a:	2043      	movs	r0, #67	; 0x43
 800731c:	f7f9 fd9d 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007320:	bf00      	nop
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40023800 	.word	0x40023800
 800732c:	40020000 	.word	0x40020000

08007330 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7fe fcf6 	bl	8005d38 <USBD_LL_SetupStage>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	4619      	mov	r1, r3
 800737e:	f7fe fd30 	bl	8005de2 <USBD_LL_DataOutStage>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	3348      	adds	r3, #72	; 0x48
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	4619      	mov	r1, r3
 80073b2:	f7fe fd79 	bl	8005ea8 <USBD_LL_DataInStage>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fe8d 	bl	80060ec <USBD_LL_SOF>
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d001      	beq.n	80073f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80073ee:	f7f9 f959 	bl	80006a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073f8:	7bfa      	ldrb	r2, [r7, #15]
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fe37 	bl	8006070 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fde3 	bl	8005fd4 <USBD_LL_Reset>
}
 800740e:	bf00      	nop
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fe32 	bl	8006090 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6812      	ldr	r2, [r2, #0]
 800743a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <HAL_PCD_SuspendCallback+0x48>)
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	4a03      	ldr	r2, [pc, #12]	; (8007460 <HAL_PCD_SuspendCallback+0x48>)
 8007452:	f043 0306 	orr.w	r3, r3, #6
 8007456:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	e000ed00 	.word	0xe000ed00

08007464 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fe22 	bl	80060bc <USBD_LL_Resume>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fe70 	bl	800617c <USBD_LL_IsoOUTIncomplete>
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	4611      	mov	r1, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fe38 	bl	8006130 <USBD_LL_IsoINIncomplete>
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fe76 	bl	80061c8 <USBD_LL_DevConnected>
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fe73 	bl	80061de <USBD_LL_DevDisconnected>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d13c      	bne.n	800758a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007510:	4a20      	ldr	r2, [pc, #128]	; (8007594 <USBD_LL_Init+0x94>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <USBD_LL_Init+0x94>)
 800751c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007520:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <USBD_LL_Init+0x94>)
 8007522:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007526:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007528:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <USBD_LL_Init+0x94>)
 800752a:	2204      	movs	r2, #4
 800752c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <USBD_LL_Init+0x94>)
 8007530:	2202      	movs	r2, #2
 8007532:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007534:	4b17      	ldr	r3, [pc, #92]	; (8007594 <USBD_LL_Init+0x94>)
 8007536:	2200      	movs	r2, #0
 8007538:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800753a:	4b16      	ldr	r3, [pc, #88]	; (8007594 <USBD_LL_Init+0x94>)
 800753c:	2202      	movs	r2, #2
 800753e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007540:	4b14      	ldr	r3, [pc, #80]	; (8007594 <USBD_LL_Init+0x94>)
 8007542:	2200      	movs	r2, #0
 8007544:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007546:	4b13      	ldr	r3, [pc, #76]	; (8007594 <USBD_LL_Init+0x94>)
 8007548:	2200      	movs	r2, #0
 800754a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800754c:	4b11      	ldr	r3, [pc, #68]	; (8007594 <USBD_LL_Init+0x94>)
 800754e:	2200      	movs	r2, #0
 8007550:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007552:	4b10      	ldr	r3, [pc, #64]	; (8007594 <USBD_LL_Init+0x94>)
 8007554:	2200      	movs	r2, #0
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007558:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <USBD_LL_Init+0x94>)
 800755a:	2200      	movs	r2, #0
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800755e:	480d      	ldr	r0, [pc, #52]	; (8007594 <USBD_LL_Init+0x94>)
 8007560:	f7f9 fedf 	bl	8001322 <HAL_PCD_Init>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800756a:	f7f9 f89b 	bl	80006a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800756e:	2180      	movs	r1, #128	; 0x80
 8007570:	4808      	ldr	r0, [pc, #32]	; (8007594 <USBD_LL_Init+0x94>)
 8007572:	f7fb f83c 	bl	80025ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	2100      	movs	r1, #0
 800757a:	4806      	ldr	r0, [pc, #24]	; (8007594 <USBD_LL_Init+0x94>)
 800757c:	f7fa fff0 	bl	8002560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007580:	2280      	movs	r2, #128	; 0x80
 8007582:	2101      	movs	r1, #1
 8007584:	4803      	ldr	r0, [pc, #12]	; (8007594 <USBD_LL_Init+0x94>)
 8007586:	f7fa ffeb 	bl	8002560 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	200012c0 	.word	0x200012c0

08007598 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7f9 ffd4 	bl	800155c <HAL_PCD_Start>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f942 	bl	8007844 <USBD_Get_USB_Status>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	461a      	mov	r2, r3
 80075dc:	4603      	mov	r3, r0
 80075de:	70fb      	strb	r3, [r7, #3]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70bb      	strb	r3, [r7, #2]
 80075e4:	4613      	mov	r3, r2
 80075e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075f6:	78bb      	ldrb	r3, [r7, #2]
 80075f8:	883a      	ldrh	r2, [r7, #0]
 80075fa:	78f9      	ldrb	r1, [r7, #3]
 80075fc:	f7fa fbb8 	bl	8001d70 <HAL_PCD_EP_Open>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f91c 	bl	8007844 <USBD_Get_USB_Status>
 800760c:	4603      	mov	r3, r0
 800760e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007610:	7bbb      	ldrb	r3, [r7, #14]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7fa fc01 	bl	8001e40 <HAL_PCD_EP_Close>
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f8fd 	bl	8007844 <USBD_Get_USB_Status>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800764e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f7fa fcd9 	bl	800202e <HAL_PCD_EP_SetStall>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f8de 	bl	8007844 <USBD_Get_USB_Status>
 8007688:	4603      	mov	r3, r0
 800768a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800768c:	7bbb      	ldrb	r3, [r7, #14]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	4611      	mov	r1, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fa fd1e 	bl	80020f6 <HAL_PCD_EP_ClrStall>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f8bf 	bl	8007844 <USBD_Get_USB_Status>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da0b      	bge.n	8007708 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	4613      	mov	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	333e      	adds	r3, #62	; 0x3e
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	e00b      	b.n	8007720 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	4613      	mov	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800771e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f7fa faeb 	bl	8001d26 <HAL_PCD_SetAddress>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f874 	bl	8007844 <USBD_Get_USB_Status>
 800775c:	4603      	mov	r3, r0
 800775e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007760:	7bbb      	ldrb	r3, [r7, #14]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	460b      	mov	r3, r1
 8007778:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007788:	7af9      	ldrb	r1, [r7, #11]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	f7fa fc04 	bl	8001f9a <HAL_PCD_EP_Transmit>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f853 	bl	8007844 <USBD_Get_USB_Status>
 800779e:	4603      	mov	r3, r0
 80077a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	460b      	mov	r3, r1
 80077ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077ca:	7af9      	ldrb	r1, [r7, #11]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	f7fa fb80 	bl	8001ed4 <HAL_PCD_EP_Receive>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f832 	bl	8007844 <USBD_Get_USB_Status>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f7fa fbb0 	bl	8001f6a <HAL_PCD_EP_GetRxCount>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800781c:	4b03      	ldr	r3, [pc, #12]	; (800782c <USBD_static_malloc+0x18>)
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	200001bc 	.word	0x200001bc

08007830 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d817      	bhi.n	8007888 <USBD_Get_USB_Status+0x44>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USBD_Get_USB_Status+0x1c>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007871 	.word	0x08007871
 8007864:	08007877 	.word	0x08007877
 8007868:	0800787d 	.word	0x0800787d
 800786c:	08007883 	.word	0x08007883
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]
    break;
 8007874:	e00b      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007876:	2303      	movs	r3, #3
 8007878:	73fb      	strb	r3, [r7, #15]
    break;
 800787a:	e008      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
    break;
 8007880:	e005      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007882:	2303      	movs	r3, #3
 8007884:	73fb      	strb	r3, [r7, #15]
    break;
 8007886:	e002      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007888:	2303      	movs	r3, #3
 800788a:	73fb      	strb	r3, [r7, #15]
    break;
 800788c:	bf00      	nop
  }
  return usb_status;
 800788e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <__libc_init_array>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4d0d      	ldr	r5, [pc, #52]	; (80078d4 <__libc_init_array+0x38>)
 80078a0:	4c0d      	ldr	r4, [pc, #52]	; (80078d8 <__libc_init_array+0x3c>)
 80078a2:	1b64      	subs	r4, r4, r5
 80078a4:	10a4      	asrs	r4, r4, #2
 80078a6:	2600      	movs	r6, #0
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	d109      	bne.n	80078c0 <__libc_init_array+0x24>
 80078ac:	4d0b      	ldr	r5, [pc, #44]	; (80078dc <__libc_init_array+0x40>)
 80078ae:	4c0c      	ldr	r4, [pc, #48]	; (80078e0 <__libc_init_array+0x44>)
 80078b0:	f000 f820 	bl	80078f4 <_init>
 80078b4:	1b64      	subs	r4, r4, r5
 80078b6:	10a4      	asrs	r4, r4, #2
 80078b8:	2600      	movs	r6, #0
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d105      	bne.n	80078ca <__libc_init_array+0x2e>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c4:	4798      	blx	r3
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7ee      	b.n	80078a8 <__libc_init_array+0xc>
 80078ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ce:	4798      	blx	r3
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7f2      	b.n	80078ba <__libc_init_array+0x1e>
 80078d4:	08007970 	.word	0x08007970
 80078d8:	08007970 	.word	0x08007970
 80078dc:	08007970 	.word	0x08007970
 80078e0:	08007974 	.word	0x08007974

080078e4 <memset>:
 80078e4:	4402      	add	r2, r0
 80078e6:	4603      	mov	r3, r0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	f803 1b01 	strb.w	r1, [r3], #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <_init>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr

08007900 <_fini>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr
